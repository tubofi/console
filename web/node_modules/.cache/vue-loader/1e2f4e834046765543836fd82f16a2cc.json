{"remainingRequest":"E:\\临时\\console\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\临时\\console\\web\\src\\view\\example\\simpleUploader\\simpleUploader.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"E:\\临时\\console\\web\\src\\view\\example\\simpleUploader\\simpleUploader.vue","mtime":1625854608000},{"path":"E:\\临时\\console\\web\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\临时\\console\\web\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"E:\\临时\\console\\web\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"E:\\临时\\console\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\临时\\console\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnVwbG9hZGVyLWV4YW1wbGUgewogIHdpZHRoOiA4ODBweDsKICBwYWRkaW5nOiAxNXB4OwogIG1hcmdpbjogMTVweCAxNXB4IDIwcHg7CiAgZm9udC1zaXplOiAxMnB4OwogIGJveC1zaGFkb3c6IDAgMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC40KTsKfQoudXBsb2FkZXItZXhhbXBsZSAudXBsb2FkZXItYnRuIHsKICBtYXJnaW4tcmlnaHQ6IDRweDsKfQoudXBsb2FkZXItZXhhbXBsZSAudXBsb2FkZXItbGlzdCB7CiAgbWF4LWhlaWdodDogNDQwcHg7CiAgb3ZlcmZsb3c6IGF1dG87CiAgb3ZlcmZsb3cteDogaGlkZGVuOwogIG92ZXJmbG93LXk6IGF1dG87Cn0K"},{"version":3,"sources":["simpleUploader.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"simpleUploader.vue","sourceRoot":"src/view/example/simpleUploader","sourcesContent":["<template>\n  <uploader\n    :options=\"options\"\n    :file-status-text=\"statusText\"\n    :auto-start=\"false\"\n    class=\"uploader-example\"\n    @file-added=\"fileAdded\"\n    @file-progress=\"onFileProgress\"\n    @file-success=\"onFileSuccess\"\n    @file-error=\"onFileError\"\n  >\n    <uploader-unsupport />\n    <uploader-drop>\n      <p>拖拽文件至此或点击</p>\n      <uploader-btn>选择文件</uploader-btn>\n    </uploader-drop>\n    <uploader-list />\n  </uploader>\n</template>\n\n<script>\nvar notUploadedChunks = [] // 已经上传过的文件chunkNumber数组\nvar isUploaded = false // 文件已经上传成功了\nimport { mapGetters } from 'vuex'\nimport { checkFileMd5, mergeFileMd5 } from '@/api/simpleUploader'\nimport SparkMD5 from 'spark-md5'\nconst path = process.env.VUE_APP_BASE_API\nexport default {\n  name: 'SimpleUploader',\n  data() {\n    return {\n      md5: ''\n    }\n  },\n  computed: {\n    ...mapGetters('user', ['userInfo', 'token']),\n    statusText() {\n      return {\n        success: '成功了',\n        error: '出错了',\n        uploading: '上传中',\n        paused: '暂停中',\n        waiting: '等待中'\n      }\n    },\n    options() {\n      return {\n        target: path + '/simpleUploader/upload',\n        testChunks: false,\n        simultaneousUploads: 5,\n        chunkSize: 2 * 1024 * 1024,\n        headers: {\n          'x-token': this.token,\n          'x-user-id': this.userInfo.ID\n        },\n        checkChunkUploadedByResponse(chunk) {\n          if (isUploaded) {\n            return true // return true 会忽略当前文件，不会再发送给后台\n          } else {\n            // 根据已经上传过的切片来进行忽略\n            return (\n              notUploadedChunks &&\n                notUploadedChunks.some(\n                  item => item.chunkNumber === chunk.offset + 1\n                )\n            )\n          }\n        }\n      }\n    }\n  },\n  methods: {\n\n    // 上传单个文件\n    fileAdded(file) {\n      this.computeMD5(file) // 生成MD5\n    },\n    // 计算MD5值\n    computeMD5(file) {\n      var that = this\n      isUploaded = false // 这个文件是否已经上传成功过\n      notUploadedChunks = [] // 未成功的chunkNumber\n      var fileReader = new FileReader()\n      var md5 = ''\n\n      file.pause()\n\n      fileReader.readAsArrayBuffer(file.file)\n      fileReader.onload = async function(e) {\n        if (file.size !== e.target.result.byteLength) {\n          this.error(\n            'Browser reported success but could not read the file until the end.'\n          )\n          return false\n        }\n        md5 = SparkMD5.ArrayBuffer.hash(e.target.result, false)\n\n        file.uniqueIdentifier = md5\n        if (md5 !== '') {\n          const res = await checkFileMd5({ md5: md5 })\n          if (res.code === 0) {\n            if (res.data.isDone) {\n              // 上传成功过\n              isUploaded = true\n              that.$message({\n                message: '该文件已经上传成功过了，秒传成功。',\n                type: 'success'\n              })\n\n              file.cancel()\n            } else {\n              isUploaded = false\n              notUploadedChunks = res.data.chunks\n              if (notUploadedChunks.length) {\n                file.resume()\n              }\n            }\n          }\n        }\n      }\n      fileReader.onerror = function() {\n        this.error(\n          'generater md5 时FileReader异步读取文件出错了，FileReader onerror was triggered, maybe the browser aborted due to high memory usage.'\n        )\n        return false\n      }\n    },\n    // 上传进度\n    onFileProgress() {},\n    // 上传成功\n    async onFileSuccess(rootFile, file) {\n      await mergeFileMd5({ md5: file.uniqueIdentifier, fileName: file.name })\n    },\n    onFileError(rootFile, file, response) {\n      this.$message({\n        message: response,\n        type: 'error'\n      })\n    }\n  }\n}\n</script>\n\n<style>\n.uploader-example {\n  width: 880px;\n  padding: 15px;\n  margin: 15px 15px 20px;\n  font-size: 12px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);\n}\n.uploader-example .uploader-btn {\n  margin-right: 4px;\n}\n.uploader-example .uploader-list {\n  max-height: 440px;\n  overflow: auto;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n</style>\n"]}]}