{"remainingRequest":"E:\\console\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\console\\web\\src\\view\\systemTools\\autoCode\\index.vue?vue&type=style&index=0&id=a86a10ba&scoped=true&lang=scss&","dependencies":[{"path":"E:\\console\\web\\src\\view\\systemTools\\autoCode\\index.vue","mtime":1629377582356},{"path":"E:\\console\\web\\node_modules\\css-loader\\dist\\cjs.js","mtime":1629377572556},{"path":"E:\\console\\web\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1629377580375},{"path":"E:\\console\\web\\node_modules\\postcss-loader\\src\\index.js","mtime":1629377577534},{"path":"E:\\console\\web\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1629377578872},{"path":"E:\\console\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1629377571573},{"path":"E:\\console\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":1629377580375}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmJ1dHRvbi1ib3ggew0KICBwYWRkaW5nOiAxMHB4IDIwcHg7DQogIC5lbC1idXR0b24gew0KICAgIG1hcmdpbi1yaWdodDogMjBweDsNCiAgICBmbG9hdDogcmlnaHQ7DQogIH0NCn0NCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoZA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/view/systemTools/autoCode","sourcesContent":["<template>\r\n  <div>\r\n    <!-- 从数据库直接获取字段 -->\r\n    <el-collapse v-model=\"activeNames\">\r\n      <el-collapse-item name=\"1\">\r\n        <template slot=\"title\">\r\n          <div :style=\"{fontSize:'16px',paddingLeft:'20px'}\">\r\n            点这里从现有数据库创建代码\r\n            <i class=\"header-icon el-icon-thumb\" />\r\n          </div>\r\n        </template>\r\n        <el-form ref=\"getTableForm\" :inline=\"true\" :model=\"dbform\" label-width=\"120px\">\r\n          <el-form-item label=\"数据库名\" prop=\"structName\">\r\n            <el-select v-model=\"dbform.dbName\" filterable placeholder=\"请选择数据库\" @change=\"getTable\">\r\n              <el-option\r\n                v-for=\"item in dbOptions\"\r\n                :key=\"item.database\"\r\n                :label=\"item.database\"\r\n                :value=\"item.database\"\r\n              />\r\n            </el-select>\r\n          </el-form-item>\r\n          <el-form-item label=\"表名\" prop=\"structName\">\r\n            <el-select\r\n              v-model=\"dbform.tableName\"\r\n              :disabled=\"!dbform.dbName\"\r\n              filterable\r\n              placeholder=\"请选择表\"\r\n            >\r\n              <el-option\r\n                v-for=\"item in tableOptions\"\r\n                :key=\"item.tableName\"\r\n                :label=\"item.tableName\"\r\n                :value=\"item.tableName\"\r\n              />\r\n            </el-select>\r\n          </el-form-item>\r\n          <el-form-item>\r\n            <el-button size=\"mini\" type=\"primary\" @click=\"getColumn\">使用此表创建</el-button>\r\n          </el-form-item>\r\n        </el-form>\r\n      </el-collapse-item>\r\n    </el-collapse>\r\n\r\n    <el-divider />\r\n    <!-- 初始版本自动化代码工具 -->\r\n    <el-form ref=\"autoCodeForm\" :rules=\"rules\" :model=\"form\" label-width=\"120px\" :inline=\"true\">\r\n      <el-form-item label=\"Struct名称\" prop=\"structName\">\r\n        <el-input v-model=\"form.structName\" placeholder=\"首字母自动转换大写\" />\r\n      </el-form-item>\r\n      <el-form-item label=\"tableName\" prop=\"tableName\">\r\n        <el-input v-model=\"form.tableName\" placeholder=\"指定表名（非必填）\" />\r\n      </el-form-item>\r\n      <el-form-item label=\"Struct简称\" prop=\"abbreviation\">\r\n        <el-input v-model=\"form.abbreviation\" placeholder=\"简称会作为入参对象名和路由group\" />\r\n      </el-form-item>\r\n      <el-form-item label=\"Struct中文名称\" prop=\"description\">\r\n        <el-input v-model=\"form.description\" placeholder=\"中文描述作为自动api描述\" />\r\n      </el-form-item>\r\n      <el-form-item label=\"文件名称\" prop=\"packageName\">\r\n        <el-input v-model=\"form.packageName\" placeholder=\"生成文件的默认名称(建议为驼峰格式,首字母小写,如sysXxxXxxx)\" />\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <template slot=\"label\">\r\n          <el-tooltip content=\"注：把自动生成的API注册进数据库\" placement=\"bottom\" effect=\"light\">\r\n            <div> 自动创建API </div>\r\n          </el-tooltip>\r\n        </template>\r\n        <el-checkbox v-model=\"form.autoCreateApiToSql\" />\r\n      </el-form-item>\r\n      <el-form-item>\r\n        <template slot=\"label\">\r\n          <el-tooltip content=\"注：自动迁移生成的文件到ymal配置的对应位置\" placement=\"bottom\" effect=\"light\">\r\n            <div> 自动移动文件 </div>\r\n          </el-tooltip>\r\n        </template>\r\n        <el-checkbox v-model=\"form.autoMoveFile\" />\r\n      </el-form-item>\r\n    </el-form>\r\n    <!-- 组件列表 -->\r\n    <div class=\"button-box clearflex\">\r\n      <el-button size=\"mini\" type=\"primary\" @click=\"editAndAddField()\">新增Field</el-button>\r\n    </div>\r\n    <el-table :data=\"form.fields\" border stripe>\r\n      <el-table-column type=\"index\" label=\"序列\" width=\"100\" />\r\n      <el-table-column prop=\"fieldName\" label=\"Field名\" />\r\n      <el-table-column prop=\"fieldDesc\" label=\"中文名\" />\r\n      <el-table-column prop=\"fieldJson\" label=\"FieldJson\" />\r\n      <el-table-column prop=\"fieldType\" label=\"Field数据类型\" width=\"130\" />\r\n      <el-table-column prop=\"dataType\" label=\"数据库字段类型\" width=\"130\" />\r\n      <el-table-column prop=\"dataTypeLong\" label=\"数据库字段长度\" width=\"130\" />\r\n      <el-table-column prop=\"columnName\" label=\"数据库字段\" width=\"130\" />\r\n      <el-table-column prop=\"comment\" label=\"数据库字段描述\" width=\"130\" />\r\n      <el-table-column prop=\"fieldSearchType\" label=\"搜索条件\" width=\"130\" />\r\n      <el-table-column prop=\"dictType\" label=\"字典\" width=\"130\" />\r\n      <el-table-column label=\"操作\" width=\"300\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button\r\n            size=\"mini\"\r\n            type=\"primary\"\r\n            icon=\"el-icon-edit\"\r\n            @click=\"editAndAddField(scope.row)\"\r\n          >编辑</el-button>\r\n          <el-button\r\n            size=\"mini\"\r\n            type=\"text\"\r\n            :disabled=\"scope.$index === 0\"\r\n            @click=\"moveUpField(scope.$index)\"\r\n          >上移</el-button>\r\n          <el-button\r\n            size=\"mini\"\r\n            type=\"text\"\r\n            :disabled=\"(scope.$index + 1) === form.fields.length\"\r\n            @click=\"moveDownField(scope.$index)\"\r\n          >下移</el-button>\r\n          <el-popover v-model=\"scope.row.visible\" placement=\"top\">\r\n            <p>确定删除吗？</p>\r\n            <div style=\"text-align: right; margin: 0\">\r\n              <el-button size=\"mini\" type=\"text\" @click=\"scope.row.visible = false\">取消</el-button>\r\n              <el-button type=\"primary\" size=\"mini\" @click=\"deleteField(scope.$index)\">确定</el-button>\r\n            </div>\r\n            <el-button slot=\"reference\" size=\"mini\" type=\"danger\" icon=\"el-icon-delete\">删除</el-button>\r\n          </el-popover>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n    <el-tag type=\"danger\">id , created_at , updated_at , deleted_at 会自动生成请勿重复创建</el-tag>\r\n    <!-- 组件列表 -->\r\n    <div class=\"button-box clearflex\">\r\n      <el-button size=\"mini\" type=\"primary\" @click=\"enterForm(true)\">预览代码</el-button>\r\n      <el-button size=\"mini\" type=\"primary\" @click=\"enterForm(false)\">生成代码</el-button>\r\n    </div>\r\n    <!-- 组件弹窗 -->\r\n    <el-dialog title=\"组件内容\" :visible.sync=\"dialogFlag\">\r\n      <FieldDialog v-if=\"dialogFlag\" ref=\"fieldDialog\" :dialog-middle=\"dialogMiddle\" />\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button size=\"mini\" @click=\"closeDialog\">取 消</el-button>\r\n        <el-button size=\"mini\" type=\"primary\" @click=\"enterDialog\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <el-dialog :visible.sync=\"previewFlag\">\r\n      <PreviewCodeDialg v-if=\"previewFlag\" :preview-code=\"preViewCode\" />\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button type=\"primary\" @click=\"previewFlag = false\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nconst fieldTemplate = {\r\n  fieldName: '',\r\n  fieldDesc: '',\r\n  fieldType: '',\r\n  dataType: '',\r\n  fieldJson: '',\r\n  columnName: '',\r\n  dataTypeLong: '',\r\n  comment: '',\r\n  fieldSearchType: '',\r\n  dictType: ''\r\n}\r\n\r\nimport FieldDialog from '@/view/systemTools/autoCode/component/fieldDialog.vue'\r\nimport PreviewCodeDialg from '@/view/systemTools/autoCode/component/previewCodeDialg.vue'\r\nimport { toUpperCase, toHump, toSQLLine } from '@/utils/stringFun'\r\nimport { createTemp, getDB, getTable, getColumn, preview } from '@/api/autoCode'\r\nimport { getDict } from '@/utils/dictionary'\r\n\r\nexport default {\r\n  name: 'AutoCode',\r\n  components: {\r\n    FieldDialog,\r\n    PreviewCodeDialg\r\n  },\r\n  data() {\r\n    return {\r\n      activeNames: [''],\r\n      preViewCode: {},\r\n      dbform: {\r\n        dbName: '',\r\n        tableName: ''\r\n      },\r\n      dbOptions: [],\r\n      tableOptions: [],\r\n      addFlag: '',\r\n      fdMap: {},\r\n      form: {\r\n        structName: '',\r\n        tableName: '',\r\n        packageName: '',\r\n        abbreviation: '',\r\n        description: '',\r\n        autoCreateApiToSql: false,\r\n        autoMoveFile: false,\r\n        fields: []\r\n      },\r\n      rules: {\r\n        structName: [\r\n          { required: true, message: '请输入结构体名称', trigger: 'blur' }\r\n        ],\r\n        abbreviation: [\r\n          { required: true, message: '请输入结构体简称', trigger: 'blur' }\r\n        ],\r\n        description: [\r\n          { required: true, message: '请输入结构体描述', trigger: 'blur' }\r\n        ],\r\n        packageName: [\r\n          {\r\n            required: true,\r\n            message: '文件名称：sysXxxxXxxx',\r\n            trigger: 'blur'\r\n          }\r\n        ]\r\n      },\r\n      dialogMiddle: {},\r\n      bk: {},\r\n      dialogFlag: false,\r\n      previewFlag: false\r\n    }\r\n  },\r\n  created() {\r\n    this.getDb()\r\n    this.setFdMap()\r\n  },\r\n  methods: {\r\n    editAndAddField(item) {\r\n      this.dialogFlag = true\r\n      if (item) {\r\n        this.addFlag = 'edit'\r\n        this.bk = JSON.parse(JSON.stringify(item))\r\n        this.dialogMiddle = item\r\n      } else {\r\n        this.addFlag = 'add'\r\n        this.dialogMiddle = JSON.parse(JSON.stringify(fieldTemplate))\r\n      }\r\n    },\r\n    moveUpField(index) {\r\n      if (index === 0) {\r\n        return\r\n      }\r\n      const oldUpField = this.form.fields[index - 1]\r\n      this.form.fields.splice(index - 1, 1)\r\n      this.form.fields.splice(index, 0, oldUpField)\r\n    },\r\n    moveDownField(index) {\r\n      const fCount = this.form.fields.length\r\n      if (index === fCount - 1) {\r\n        return\r\n      }\r\n      const oldDownField = this.form.fields[index + 1]\r\n      this.form.fields.splice(index + 1, 1)\r\n      this.form.fields.splice(index, 0, oldDownField)\r\n    },\r\n    enterDialog() {\r\n      this.$refs.fieldDialog.$refs.fieldDialogFrom.validate(valid => {\r\n        if (valid) {\r\n          this.dialogMiddle.fieldName = toUpperCase(\r\n            this.dialogMiddle.fieldName\r\n          )\r\n          if (this.addFlag === 'add') {\r\n            this.form.fields.push(this.dialogMiddle)\r\n          }\r\n          this.dialogFlag = false\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    closeDialog() {\r\n      if (this.addFlag === 'edit') {\r\n        this.dialogMiddle = this.bk\r\n      }\r\n      this.dialogFlag = false\r\n    },\r\n    deleteField(index) {\r\n      this.form.fields.splice(index, 1)\r\n    },\r\n    async enterForm(isPreview) {\r\n      if (this.form.fields.length <= 0) {\r\n        this.$message({\r\n          type: 'error',\r\n          message: '请填写至少一个field'\r\n        })\r\n        return false\r\n      }\r\n      if (\r\n        this.form.fields.some(item => item.fieldName === this.form.structName)\r\n      ) {\r\n        this.$message({\r\n          type: 'error',\r\n          message: '存在与结构体同名的字段'\r\n        })\r\n        return false\r\n      }\r\n      this.$refs.autoCodeForm.validate(async valid => {\r\n        if (valid) {\r\n          this.form.structName = toUpperCase(this.form.structName)\r\n          if (this.form.structName === this.form.abbreviation) {\r\n            this.$message({\r\n              type: 'error',\r\n              message: 'structName和struct简称不能相同'\r\n            })\r\n            return false\r\n          }\r\n          this.form.humpPackageName = toSQLLine(this.form.packageName)\r\n          debugger\r\n          if (isPreview) {\r\n            const data = await preview(this.form)\r\n            this.preViewCode = data.data.autoCode\r\n            this.previewFlag = true\r\n          } else {\r\n            const data = await createTemp(this.form)\r\n            if (data.headers?.success === 'false') {\r\n              return\r\n            } else {\r\n              this.$message({\r\n                type: 'success',\r\n                message: '自动化代码创建成功，正在下载'\r\n              })\r\n            }\r\n            const blob = new Blob([data])\r\n            const fileName = 'ginvueadmin.zip'\r\n            if ('download' in document.createElement('a')) {\r\n              // 不是IE浏览器\r\n              const url = window.URL.createObjectURL(blob)\r\n              const link = document.createElement('a')\r\n              link.style.display = 'none'\r\n              link.href = url\r\n              link.setAttribute('download', fileName)\r\n              document.body.appendChild(link)\r\n              link.click()\r\n              document.body.removeChild(link) // 下载完成移除元素\r\n              window.URL.revokeObjectURL(url) // 释放掉blob对象\r\n            } else {\r\n              // IE 10+\r\n              window.navigator.msSaveBlob(blob, fileName)\r\n            }\r\n          }\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    async getDb() {\r\n      const res = await getDB()\r\n      if (res.code === 0) {\r\n        this.dbOptions = res.data.dbs\r\n      }\r\n    },\r\n    async getTable() {\r\n      const res = await getTable({ dbName: this.dbform.dbName })\r\n      if (res.code === 0) {\r\n        this.tableOptions = res.data.tables\r\n      }\r\n      this.dbform.tableName = ''\r\n    },\r\n    async getColumn() {\r\n      const gormModelList = ['id', 'created_at', 'updated_at', 'deleted_at']\r\n      const res = await getColumn(this.dbform)\r\n      if (res.code === 0) {\r\n        const tbHump = toHump(this.dbform.tableName)\r\n        this.form.structName = toUpperCase(tbHump)\r\n        this.form.tableName = this.dbform.tableName\r\n        this.form.packageName = tbHump\r\n        this.form.abbreviation = tbHump\r\n        this.form.description = tbHump + '表'\r\n        this.form.autoCreateApiToSql = true\r\n        this.form.fields = []\r\n        res.data.columns &&\r\n          res.data.columns.map(item => {\r\n            if (!gormModelList.some(gormfd => gormfd === item.columnName)) {\r\n              const fbHump = toHump(item.columnName)\r\n              this.form.fields.push({\r\n                fieldName: toUpperCase(fbHump),\r\n                fieldDesc: item.columnComment || fbHump + '字段',\r\n                fieldType: this.fdMap[item.dataType],\r\n                dataType: item.dataType,\r\n                fieldJson: fbHump,\r\n                dataTypeLong: item.dataTypeLong,\r\n                columnName: item.columnName,\r\n                comment: item.columnComment,\r\n                fieldSearchType: '',\r\n                dictType: ''\r\n              })\r\n            }\r\n          })\r\n      }\r\n    },\r\n    async setFdMap() {\r\n      const fdTypes = ['string', 'int', 'bool', 'float64', 'time.Time']\r\n      fdTypes.map(async fdtype => {\r\n        const res = await getDict(fdtype)\r\n        res && res.map(item => {\r\n          this.fdMap[item.label] = fdtype\r\n        })\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.button-box {\r\n  padding: 10px 20px;\r\n  .el-button {\r\n    margin-right: 20px;\r\n    float: right;\r\n  }\r\n}\r\n</style>\r\n"]}]}