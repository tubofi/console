{"remainingRequest":"E:\\console\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\console\\web\\src\\view\\example\\breakpoint\\breakpoint.vue?vue&type=style&index=0&id=88871cce&lang=scss&scoped=true&","dependencies":[{"path":"E:\\console\\web\\src\\view\\example\\breakpoint\\breakpoint.vue","mtime":1629645124071},{"path":"E:\\console\\web\\node_modules\\css-loader\\dist\\cjs.js","mtime":1629645116935},{"path":"E:\\console\\web\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1629645123321},{"path":"E:\\console\\web\\node_modules\\postcss-loader\\src\\index.js","mtime":1629645121812},{"path":"E:\\console\\web\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1629645122374},{"path":"E:\\console\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1629645113861},{"path":"E:\\console\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":1629645123321}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KaDMgew0KICBtYXJnaW46IDQwcHggMCAwOw0KfQ0KdWwgew0KICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7DQogIHBhZGRpbmc6IDA7DQp9DQpsaSB7DQogIGRpc3BsYXk6IGlubGluZS1ibG9jazsNCiAgbWFyZ2luOiAwIDEwcHg7DQp9DQphIHsNCiAgY29sb3I6ICM0MmI5ODM7DQp9DQojZnJvbUNvbnR7DQogIGRpc3BsYXk6IGlubGluZS1ibG9jazsNCn0NCi5maWxlVXBsb2Fkew0KICAgIHBhZGRpbmc6IDNweCAxMHB4Ow0KICAgIGZvbnQtc2l6ZTogMTJweDsNCiAgICBoZWlnaHQ6IDIwcHg7DQogICAgbGluZS1oZWlnaHQ6IDIwcHg7DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KICAgIGN1cnNvcjogcG9pbnRlcjsNCiAgICBjb2xvcjogIzAwMDsNCiAgICBib3JkZXI6IDFweCBzb2xpZCAjYzFjMWMxOw0KICAgIGJvcmRlci1yYWRpdXM6IDRweDsNCiAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsNCiAgICBpbnB1dHsNCiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICAgIGZvbnQtc2l6ZTogMTAwcHg7DQogICAgICByaWdodDogMDsNCiAgICAgIHRvcDogMDsNCiAgICAgIG9wYWNpdHk6IDA7DQogICAgICBjdXJzb3I6IHBvaW50ZXI7DQogICAgfQ0KfQ0KIC5maWxlTmFtZXsNCiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7DQogICAgdmVydGljYWwtYWxpZ246IHRvcDsNCiAgICBtYXJnaW46IDZweCAxNXB4IDAgMTVweDsNCiAgfQ0KICAudXBsb2FkQnRuew0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICB0b3A6IC0xMHB4Ow0KICAgIG1hcmdpbi1sZWZ0OiAxNXB4Ow0KICB9DQogIC50aXBzew0KICAgIG1hcmdpbi10b3A6IDMwcHg7DQogICAgZm9udC1zaXplOiAxNHB4Ow0KICAgIGZvbnQtd2VpZ2h0OiA0MDA7DQogICAgY29sb3I6ICM2MDYyNjY7DQogIH0NCiAgLmVsLWRpdmlkZXJ7DQogICAgbWFyZ2luOiAwIDAgMzBweCAwOw0KICB9DQoNCiAubGlzdHsNCiAgIG1hcmdpbi10b3A6MTVweDsNCiB9DQogLmxpc3QtaXRlbSB7DQogIGRpc3BsYXk6IGJsb2NrOw0KICBtYXJnaW4tcmlnaHQ6IDEwcHg7DQogIGNvbG9yOiAjNjA2MjY2Ow0KICBsaW5lLWhlaWdodDogMjVweDsNCiAgbWFyZ2luLWJvdHRvbTogNXB4Ow0KICB3aWR0aDogNDAlOw0KICAgLnBlcmNlbnRhZ2V7DQogICAgICAgICAgZmxvYXQ6IHJpZ2h0Ow0KICAgICAgICB9DQp9DQoubGlzdC1lbnRlci1hY3RpdmUsIC5saXN0LWxlYXZlLWFjdGl2ZSB7DQogIHRyYW5zaXRpb246IGFsbCAxczsNCn0NCi5saXN0LWVudGVyLCAubGlzdC1sZWF2ZS10bw0KLyogLmxpc3QtbGVhdmUtYWN0aXZlIGZvciBiZWxvdyB2ZXJzaW9uIDIuMS44ICovIHsNCiAgb3BhY2l0eTogMDsNCiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0zMHB4KTsNCn0NCg=="},{"version":3,"sources":["breakpoint.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"breakpoint.vue","sourceRoot":"src/view/example/breakpoint","sourcesContent":["<template>\r\n  <div class=\"hello\">\r\n    <el-divider content-position=\"left\">大文件上传</el-divider>\r\n    <form id=\"fromCont\" method=\"post\">\r\n      <div class=\"fileUpload\" @click=\"inputChange\">\r\n        选择文件\r\n        <input v-show=\"false\" id=\"file\" ref=\"Input\" multiple=\"multiple\" type=\"file\" @change=\"choseFile\">\r\n      </div>\r\n    </form>\r\n    <el-button :disabled=\"limitFileSize\" type=\"primary\" size=\"mini\" class=\"uploadBtn\" @click=\"getFile\">上传文件</el-button>\r\n    <div class=\"el-upload__tip\">请上传不超过5MB的文件</div>\r\n    <div class=\"list\">\r\n      <transition name=\"list\" tag=\"p\">\r\n        <div v-if=\"file\" class=\"list-item\">\r\n          <i class=\"el-icon-document\" />\r\n          <span>{{ file.name }}</span>\r\n          <span class=\"percentage\">{{ percentage }}%</span>\r\n          <el-progress :show-text=\"false\" :text-inside=\"false\" :stroke-width=\"2\" :percentage=\"percentage\" />\r\n        </div>\r\n      </transition>\r\n    </div>\r\n    <!-- <span\r\n      v-if=\"this.file\"\r\n    >{{Math.floor(((this.formDataList.length-this.waitNum)/this.formDataList.length)*100)}}%</span> -->\r\n    <div class=\"tips\">此版本为先行体验功能测试版，样式美化和性能优化正在进行中，上传切片文件和合成的完整文件分别再QMPlusserver目录的breakpointDir文件夹和fileDir文件夹</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SparkMD5 from 'spark-md5'\r\nimport axios from 'axios'\r\nimport {\r\n  findFile,\r\n  breakpointContinueFinish,\r\n  removeChunk\r\n} from '@/api/breakpoint'\r\nexport default {\r\n  name: 'HelloWorld',\r\n  data() {\r\n    return {\r\n      file: null,\r\n      fileMd5: '',\r\n      formDataList: [],\r\n      waitUpLoad: [],\r\n      waitNum: 0,\r\n      limitFileSize: false,\r\n      percentage: 0,\r\n      percentageFlage: true,\r\n      customColor: '#409eff'\r\n    }\r\n  },\r\n  methods: {\r\n    // 选中文件的函数\r\n    async choseFile(e) {\r\n      const fileR = new FileReader() // 创建一个reader用来读取文件流\r\n      const file = e.target.files[0] // 获取当前文件\r\n      const maxSize = 5 * 1024 * 1024\r\n      this.file = file // file 丢全局方便后面用 可以改进为func传参形式\r\n      this.percentage = 0\r\n      if (file.size < maxSize) {\r\n        fileR.readAsArrayBuffer(file) // 把文件读成ArrayBuffer  主要为了保持跟后端的流一致\r\n        fileR.onload = async e => {\r\n          // 读成arrayBuffer的回调 e 为方法自带参数 相当于 dom的e 流存在e.target.result 中\r\n          const blob = e.target.result\r\n          const spark = new SparkMD5.ArrayBuffer() // 创建md5制造工具 （md5用于检测文件一致性 这里不懂就打电话问我）\r\n          spark.append(blob) // 文件流丢进工具\r\n          this.fileMd5 = spark.end() // 工具结束 产生一个a 总文件的md5\r\n          const FileSliceCap = 1 * 1024 * 1024 // 分片字节数\r\n          let start = 0 // 定义分片开始切的地方\r\n          let end = 0 // 每片结束切的地方a\r\n          let i = 0 // 第几片\r\n          this.formDataList = [] // 分片存储的一个池子 丢全局\r\n          while (end < file.size) {\r\n            // 当结尾数字大于文件总size的时候 结束切片\r\n            start = i * FileSliceCap // 计算每片开始位置\r\n            end = (i + 1) * FileSliceCap // 计算每片结束位置\r\n            var fileSlice = this.file.slice(start, end) // 开始切  file.slice 为 h5方法 对文件切片 参数为 起止字节数\r\n            const formData = new window.FormData() // 创建FormData用于存储传给后端的信息\r\n            formData.append('fileMd5', this.fileMd5) // 存储总文件的Md5 让后端知道自己是谁的切片\r\n            formData.append('file', fileSlice) // 当前的切片\r\n            formData.append('chunkNumber', i) // 当前是第几片\r\n            formData.append('fileName', this.file.name) // 当前文件的文件名 用于后端文件切片的命名  formData.appen 为 formData对象添加参数的方法\r\n            this.formDataList.push({ key: i, formData }) // 把当前切片信息 自己是第几片 存入我们方才准备好的池子\r\n            i++\r\n          }\r\n          const params = {\r\n            fileName: this.file.name,\r\n            fileMd5: this.fileMd5,\r\n            chunkTotal: this.formDataList.length\r\n          }\r\n          const res = await findFile(params)\r\n          // 全部切完以后 发一个请求给后端 拉当前文件后台存储的切片信息 用于检测有多少上传成功的切片\r\n          const finishList = res.data.file.ExaFileChunk // 上传成功的切片\r\n          const IsFinish = res.data.file.IsFinish // 是否是同文件不同命 （文件md5相同 文件名不同 则默认是同一个文件但是不同文件名 此时后台数据库只需要拷贝一下数据库文件即可 不需要上传文件 即秒传功能）\r\n          if (!IsFinish) {\r\n            // 当是断点续传时候\r\n            this.waitUpLoad = this.formDataList.filter(all => {\r\n              return !(\r\n                finishList &&\r\n              finishList.some(fi => fi.FileChunkNumber === all.key)\r\n              ) // 找出需要上传的切片\r\n            })\r\n          } else {\r\n            this.waitUpLoad = [] // 秒传则没有需要上传的切片\r\n          }\r\n          this.waitNum = this.waitUpLoad.length // 记录长度用于百分比展示\r\n        }\r\n      } else {\r\n        this.limitFileSize = true\r\n        this.$message('请上传小于5M文件')\r\n      }\r\n    },\r\n    getFile() {\r\n      // 确定按钮\r\n      if (this.file === null) {\r\n        this.$message('请先上传文件')\r\n        return\r\n      }\r\n      this.percentage = Math.floor(((this.formDataList.length - this.waitNum) / this.formDataList.length) * 100)\r\n      if (this.percentage === 100) {\r\n        this.percentageFlage = false\r\n      }\r\n      this.sliceFile() // 上传切片\r\n    },\r\n    sliceFile() {\r\n      this.waitUpLoad &&\r\n        this.waitUpLoad.map(item => {\r\n          // 需要上传的切片\r\n          item.formData.append('chunkTotal', this.formDataList.length) // 切片总数携带给后台 总有用的\r\n          const fileR = new FileReader() // 功能同上\r\n          const file = item.formData.get('file')\r\n          fileR.readAsArrayBuffer(file)\r\n          fileR.onload = e => {\r\n            const spark = new SparkMD5.ArrayBuffer()\r\n            spark.append(e.target.result)\r\n            item.formData.append('chunkMd5', spark.end()) // 获取当前切片md5 后端用于验证切片完整性\r\n            this.upLoadFileSlice(item)\r\n          }\r\n        })\r\n    },\r\n    async upLoadFileSlice(item) {\r\n      // 切片上传\r\n      await axios.post(process.env.VUE_APP_BASE_API + '/fileUploadAndDownload/breakpointContinue', item.formData)\r\n      this.waitNum-- // 百分数增加\r\n      if (this.waitNum === 0) {\r\n        // 切片传完以后 合成文件\r\n        const params = {\r\n          fileName: this.file.name,\r\n          fileMd5: this.fileMd5\r\n        }\r\n        const res = await breakpointContinueFinish(params)\r\n        if (res.success) {\r\n          // 合成文件过后 删除缓存切片\r\n          const params = {\r\n            fileName: this.file.name,\r\n            fileMd5: this.fileMd5,\r\n            filePath: res.data.filePath\r\n          }\r\n          await removeChunk(params)\r\n        }\r\n      }\r\n    },\r\n    inputChange() {\r\n      this.$refs.Input.dispatchEvent(new MouseEvent('click'))\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang='scss' scoped>\r\nh3 {\r\n  margin: 40px 0 0;\r\n}\r\nul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\nli {\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n}\r\na {\r\n  color: #42b983;\r\n}\r\n#fromCont{\r\n  display: inline-block;\r\n}\r\n.fileUpload{\r\n    padding: 3px 10px;\r\n    font-size: 12px;\r\n    height: 20px;\r\n    line-height: 20px;\r\n    position: relative;\r\n    cursor: pointer;\r\n    color: #000;\r\n    border: 1px solid #c1c1c1;\r\n    border-radius: 4px;\r\n    overflow: hidden;\r\n    display: inline-block;\r\n    input{\r\n      position: absolute;\r\n      font-size: 100px;\r\n      right: 0;\r\n      top: 0;\r\n      opacity: 0;\r\n      cursor: pointer;\r\n    }\r\n}\r\n .fileName{\r\n    display: inline-block;\r\n    vertical-align: top;\r\n    margin: 6px 15px 0 15px;\r\n  }\r\n  .uploadBtn{\r\n    position: relative;\r\n    top: -10px;\r\n    margin-left: 15px;\r\n  }\r\n  .tips{\r\n    margin-top: 30px;\r\n    font-size: 14px;\r\n    font-weight: 400;\r\n    color: #606266;\r\n  }\r\n  .el-divider{\r\n    margin: 0 0 30px 0;\r\n  }\r\n\r\n .list{\r\n   margin-top:15px;\r\n }\r\n .list-item {\r\n  display: block;\r\n  margin-right: 10px;\r\n  color: #606266;\r\n  line-height: 25px;\r\n  margin-bottom: 5px;\r\n  width: 40%;\r\n   .percentage{\r\n          float: right;\r\n        }\r\n}\r\n.list-enter-active, .list-leave-active {\r\n  transition: all 1s;\r\n}\r\n.list-enter, .list-leave-to\r\n/* .list-leave-active for below version 2.1.8 */ {\r\n  opacity: 0;\r\n  transform: translateY(-30px);\r\n}\r\n</style>\r\n"]}]}