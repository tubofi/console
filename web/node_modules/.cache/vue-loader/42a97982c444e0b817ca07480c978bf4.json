{"remainingRequest":"E:\\console\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\console\\web\\src\\view\\system\\state.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\console\\web\\src\\view\\system\\state.vue","mtime":1629377582356},{"path":"E:\\console\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1629377571573},{"path":"E:\\console\\web\\node_modules\\babel-loader\\lib\\index.js","mtime":1629377569839},{"path":"E:\\console\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1629377571573},{"path":"E:\\console\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":1629377580375}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgeyBnZXRTeXN0ZW1TdGF0ZSB9IGZyb20gJ0AvYXBpL3N5c3RlbScNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogJ1N0YXRlJywNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgdGltZXI6IG51bGwsDQogICAgICBzdGF0ZToge30sDQogICAgICBjb2xvcnM6IFsNCiAgICAgICAgeyBjb2xvcjogJyM1Y2I4N2EnLCBwZXJjZW50YWdlOiAyMCB9LA0KICAgICAgICB7IGNvbG9yOiAnI2U2YTIzYycsIHBlcmNlbnRhZ2U6IDQwIH0sDQogICAgICAgIHsgY29sb3I6ICcjZjU2YzZjJywgcGVyY2VudGFnZTogODAgfQ0KICAgICAgXQ0KICAgIH0NCiAgfSwNCiAgY3JlYXRlZCgpIHsNCiAgICB0aGlzLnJlbG9hZCgpDQogICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKCgpID0+IHsNCiAgICAgIHRoaXMucmVsb2FkKCkNCiAgICB9LCAxMDAwICogMTApDQogIH0sDQogIGJlZm9yZURlc3Ryb3koKSB7DQogICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKQ0KICAgIHRoaXMudGltZXIgPSBudWxsDQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICBhc3luYyByZWxvYWQoKSB7DQogICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGdldFN5c3RlbVN0YXRlKCkNCiAgICAgIHRoaXMuc3RhdGUgPSBkYXRhLnNlcnZlcg0KICAgIH0NCiAgfQ0KfQ0K"},{"version":3,"sources":["state.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"state.vue","sourceRoot":"src/view/system","sourcesContent":["<template>\r\n  <div>\r\n    <el-row :gutter=\"15\" class=\"system_state\">\r\n      <el-col :span=\"12\">\r\n        <el-card v-if=\"state.os\" class=\"card_item\">\r\n          <div slot=\"header\">Runtime</div>\r\n          <div>\r\n            <el-row :gutter=\"10\">\r\n              <el-col :span=\"12\">os:</el-col>\r\n              <el-col :span=\"12\" v-text=\"state.os.goos\" />\r\n            </el-row>\r\n            <el-row :gutter=\"10\">\r\n              <el-col :span=\"12\">cpu nums:</el-col>\r\n              <el-col :span=\"12\" v-text=\"state.os.numCpu\" />\r\n            </el-row>\r\n            <el-row :gutter=\"10\">\r\n              <el-col :span=\"12\">compiler:</el-col>\r\n              <el-col :span=\"12\" v-text=\"state.os.compiler\" />\r\n            </el-row>\r\n            <el-row :gutter=\"10\">\r\n              <el-col :span=\"12\">go version:</el-col>\r\n              <el-col :span=\"12\" v-text=\"state.os.goVersion\" />\r\n            </el-row>\r\n            <el-row :gutter=\"10\">\r\n              <el-col :span=\"12\">goroutine nums:</el-col>\r\n              <el-col :span=\"12\" v-text=\"state.os.numGoroutine\" />\r\n            </el-row>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"12\">\r\n        <el-card v-if=\"state.disk\" class=\"card_item\">\r\n          <div slot=\"header\">Disk</div>\r\n          <div>\r\n            <el-row :gutter=\"10\">\r\n              <el-col :span=\"12\">\r\n                <el-row :gutter=\"10\">\r\n                  <el-col :span=\"12\">total (MB)</el-col>\r\n                  <el-col :span=\"12\" v-text=\"state.disk.totalMb\" />\r\n                </el-row>\r\n                <el-row :gutter=\"10\">\r\n                  <el-col :span=\"12\">used (MB)</el-col>\r\n                  <el-col :span=\"12\" v-text=\"state.disk.usedMb\" />\r\n                </el-row>\r\n                <el-row :gutter=\"10\">\r\n                  <el-col :span=\"12\">total (GB)</el-col>\r\n                  <el-col :span=\"12\" v-text=\"state.disk.totalGb\" />\r\n                </el-row>\r\n                <el-row :gutter=\"10\">\r\n                  <el-col :span=\"12\">used (GB)</el-col>\r\n                  <el-col :span=\"12\" v-text=\"state.disk.usedGb\" />\r\n                </el-row>\r\n              </el-col>\r\n              <el-col :span=\"12\">\r\n                <el-progress\r\n                  type=\"dashboard\"\r\n                  :percentage=\"state.disk.usedPercent\"\r\n                  :color=\"colors\"\r\n                />\r\n              </el-col>\r\n            </el-row>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n    <el-row :gutter=\"15\" class=\"system_state\">\r\n      <el-col :span=\"12\">\r\n        <el-card\r\n          v-if=\"state.cpu\"\r\n          class=\"card_item\"\r\n          :body-style=\"{ height: '180px', 'overflow-y': 'scroll' }\"\r\n        >\r\n          <div slot=\"header\">CPU</div>\r\n          <div>\r\n            <el-row :gutter=\"10\">\r\n              <el-col :span=\"12\">physical number of cores:</el-col>\r\n              <el-col :span=\"12\" v-text=\"state.cpu.cores\" />\r\n            </el-row>\r\n            <template v-for=\"(item, index) in state.cpu.cpus\">\r\n              <el-row :key=\"index\" :gutter=\"10\">\r\n                <el-col :span=\"12\">core {{ index }}:</el-col>\r\n                <el-col\r\n                  :span=\"12\"\r\n                ><el-progress\r\n                  type=\"line\"\r\n                  :percentage=\"+item.toFixed(0)\"\r\n                  :color=\"colors\"\r\n                /></el-col>\r\n              </el-row>\r\n            </template>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"12\">\r\n        <el-card v-if=\"state.ram\" class=\"card_item\">\r\n          <div slot=\"header\">Ram</div>\r\n          <div>\r\n            <el-row :gutter=\"10\">\r\n              <el-col :span=\"12\">\r\n                <el-row :gutter=\"10\">\r\n                  <el-col :span=\"12\">total (MB)</el-col>\r\n                  <el-col :span=\"12\" v-text=\"state.ram.totalMb\" />\r\n                </el-row>\r\n                <el-row :gutter=\"10\">\r\n                  <el-col :span=\"12\">used (MB)</el-col>\r\n                  <el-col :span=\"12\" v-text=\"state.ram.usedMb\" />\r\n                </el-row>\r\n                <el-row :gutter=\"10\">\r\n                  <el-col :span=\"12\">total (GB)</el-col>\r\n                  <el-col :span=\"12\" v-text=\"state.ram.totalMb / 1024\" />\r\n                </el-row>\r\n                <el-row :gutter=\"10\">\r\n                  <el-col :span=\"12\">used (GB)</el-col>\r\n                  <el-col\r\n                    :span=\"12\"\r\n                    v-text=\"(state.ram.usedMb / 1024).toFixed(2)\"\r\n                  />\r\n                </el-row>\r\n              </el-col>\r\n              <el-col :span=\"12\">\r\n                <el-progress\r\n                  type=\"dashboard\"\r\n                  :percentage=\"state.ram.usedPercent\"\r\n                  :color=\"colors\"\r\n                />\r\n              </el-col>\r\n            </el-row>\r\n          </div>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getSystemState } from '@/api/system'\r\nexport default {\r\n  name: 'State',\r\n  data() {\r\n    return {\r\n      timer: null,\r\n      state: {},\r\n      colors: [\r\n        { color: '#5cb87a', percentage: 20 },\r\n        { color: '#e6a23c', percentage: 40 },\r\n        { color: '#f56c6c', percentage: 80 }\r\n      ]\r\n    }\r\n  },\r\n  created() {\r\n    this.reload()\r\n    this.timer = setInterval(() => {\r\n      this.reload()\r\n    }, 1000 * 10)\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.timer)\r\n    this.timer = null\r\n  },\r\n  methods: {\r\n    async reload() {\r\n      const { data } = await getSystemState()\r\n      this.state = data.server\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.system_state {\r\n  padding: 10px;\r\n}\r\n\r\n.card_item {\r\n  height: 280px;\r\n}\r\n</style>\r\n"]}]}