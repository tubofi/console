{"remainingRequest":"E:\\console\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\console\\web\\src\\view\\example\\simpleUploader\\simpleUploader.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"E:\\console\\web\\src\\view\\example\\simpleUploader\\simpleUploader.vue","mtime":1629377582293},{"path":"E:\\console\\web\\node_modules\\css-loader\\dist\\cjs.js","mtime":1629377572556},{"path":"E:\\console\\web\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1629377580375},{"path":"E:\\console\\web\\node_modules\\postcss-loader\\src\\index.js","mtime":1629377577534},{"path":"E:\\console\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1629377571573},{"path":"E:\\console\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":1629377580375}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi51cGxvYWRlci1leGFtcGxlIHsNCiAgd2lkdGg6IDg4MHB4Ow0KICBwYWRkaW5nOiAxNXB4Ow0KICBtYXJnaW46IDE1cHggMTVweCAyMHB4Ow0KICBmb250LXNpemU6IDEycHg7DQogIGJveC1zaGFkb3c6IDAgMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC40KTsNCn0NCi51cGxvYWRlci1leGFtcGxlIC51cGxvYWRlci1idG4gew0KICBtYXJnaW4tcmlnaHQ6IDRweDsNCn0NCi51cGxvYWRlci1leGFtcGxlIC51cGxvYWRlci1saXN0IHsNCiAgbWF4LWhlaWdodDogNDQwcHg7DQogIG92ZXJmbG93OiBhdXRvOw0KICBvdmVyZmxvdy14OiBoaWRkZW47DQogIG92ZXJmbG93LXk6IGF1dG87DQp9DQo="},{"version":3,"sources":["simpleUploader.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"simpleUploader.vue","sourceRoot":"src/view/example/simpleUploader","sourcesContent":["<template>\r\n  <uploader\r\n    :options=\"options\"\r\n    :file-status-text=\"statusText\"\r\n    :auto-start=\"false\"\r\n    class=\"uploader-example\"\r\n    @file-added=\"fileAdded\"\r\n    @file-progress=\"onFileProgress\"\r\n    @file-success=\"onFileSuccess\"\r\n    @file-error=\"onFileError\"\r\n  >\r\n    <uploader-unsupport />\r\n    <uploader-drop>\r\n      <p>拖拽文件至此或点击</p>\r\n      <uploader-btn>选择文件</uploader-btn>\r\n    </uploader-drop>\r\n    <uploader-list />\r\n  </uploader>\r\n</template>\r\n\r\n<script>\r\nvar notUploadedChunks = [] // 已经上传过的文件chunkNumber数组\r\nvar isUploaded = false // 文件已经上传成功了\r\nimport { mapGetters } from 'vuex'\r\nimport { checkFileMd5, mergeFileMd5 } from '@/api/simpleUploader'\r\nimport SparkMD5 from 'spark-md5'\r\nconst path = process.env.VUE_APP_BASE_API\r\nexport default {\r\n  name: 'SimpleUploader',\r\n  data() {\r\n    return {\r\n      md5: ''\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters('user', ['userInfo', 'token']),\r\n    statusText() {\r\n      return {\r\n        success: '成功了',\r\n        error: '出错了',\r\n        uploading: '上传中',\r\n        paused: '暂停中',\r\n        waiting: '等待中'\r\n      }\r\n    },\r\n    options() {\r\n      return {\r\n        target: path + '/simpleUploader/upload',\r\n        testChunks: false,\r\n        simultaneousUploads: 5,\r\n        chunkSize: 2 * 1024 * 1024,\r\n        headers: {\r\n          'x-token': this.token,\r\n          'x-user-id': this.userInfo.ID\r\n        },\r\n        checkChunkUploadedByResponse(chunk) {\r\n          if (isUploaded) {\r\n            return true // return true 会忽略当前文件，不会再发送给后台\r\n          } else {\r\n            // 根据已经上传过的切片来进行忽略\r\n            return (\r\n              notUploadedChunks &&\r\n                notUploadedChunks.some(\r\n                  item => item.chunkNumber === chunk.offset + 1\r\n                )\r\n            )\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n\r\n    // 上传单个文件\r\n    fileAdded(file) {\r\n      this.computeMD5(file) // 生成MD5\r\n    },\r\n    // 计算MD5值\r\n    computeMD5(file) {\r\n      var that = this\r\n      isUploaded = false // 这个文件是否已经上传成功过\r\n      notUploadedChunks = [] // 未成功的chunkNumber\r\n      var fileReader = new FileReader()\r\n      var md5 = ''\r\n\r\n      file.pause()\r\n\r\n      fileReader.readAsArrayBuffer(file.file)\r\n      fileReader.onload = async function(e) {\r\n        if (file.size !== e.target.result.byteLength) {\r\n          this.error(\r\n            'Browser reported success but could not read the file until the end.'\r\n          )\r\n          return false\r\n        }\r\n        md5 = SparkMD5.ArrayBuffer.hash(e.target.result, false)\r\n\r\n        file.uniqueIdentifier = md5\r\n        if (md5 !== '') {\r\n          const res = await checkFileMd5({ md5: md5 })\r\n          if (res.code === 0) {\r\n            if (res.data.isDone) {\r\n              // 上传成功过\r\n              isUploaded = true\r\n              that.$message({\r\n                message: '该文件已经上传成功过了，秒传成功。',\r\n                type: 'success'\r\n              })\r\n\r\n              file.cancel()\r\n            } else {\r\n              isUploaded = false\r\n              notUploadedChunks = res.data.chunks\r\n              if (notUploadedChunks.length) {\r\n                file.resume()\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      fileReader.onerror = function() {\r\n        this.error(\r\n          'generater md5 时FileReader异步读取文件出错了，FileReader onerror was triggered, maybe the browser aborted due to high memory usage.'\r\n        )\r\n        return false\r\n      }\r\n    },\r\n    // 上传进度\r\n    onFileProgress() {},\r\n    // 上传成功\r\n    async onFileSuccess(rootFile, file) {\r\n      await mergeFileMd5({ md5: file.uniqueIdentifier, fileName: file.name })\r\n    },\r\n    onFileError(rootFile, file, response) {\r\n      this.$message({\r\n        message: response,\r\n        type: 'error'\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.uploader-example {\r\n  width: 880px;\r\n  padding: 15px;\r\n  margin: 15px 15px 20px;\r\n  font-size: 12px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);\r\n}\r\n.uploader-example .uploader-btn {\r\n  margin-right: 4px;\r\n}\r\n.uploader-example .uploader-list {\r\n  max-height: 440px;\r\n  overflow: auto;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n}\r\n</style>\r\n"]}]}