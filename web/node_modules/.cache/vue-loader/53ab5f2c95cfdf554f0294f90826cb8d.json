{"remainingRequest":"E:\\console\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\console\\web\\src\\view\\example\\breakpoint\\breakpoint.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\console\\web\\src\\view\\example\\breakpoint\\breakpoint.vue","mtime":1625854608000},{"path":"E:\\console\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\console\\web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\console\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\console\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["breakpoint.vue"],"names":[],"mappingsfile":"breakpoint.vue","sourceRoot":"src/view/example/breakpoint","sourcesContent":["<template>\n  <div class=\"hello\">\n    <el-divider content-position=\"left\">大文件上传</el-divider>\n    <form id=\"fromCont\" method=\"post\">\n      <div class=\"fileUpload\" @click=\"inputChange\">\n        选择文件\n        <input v-show=\"false\" id=\"file\" ref=\"Input\" multiple=\"multiple\" type=\"file\" @change=\"choseFile\">\n      </div>\n    </form>\n    <el-button :disabled=\"limitFileSize\" type=\"primary\" size=\"mini\" class=\"uploadBtn\" @click=\"getFile\">上传文件</el-button>\n    <div class=\"el-upload__tip\">请上传不超过5MB的文件</div>\n    <div class=\"list\">\n      <transition name=\"list\" tag=\"p\">\n        <div v-if=\"file\" class=\"list-item\">\n          <i class=\"el-icon-document\" />\n          <span>{{ file.name }}</span>\n          <span class=\"percentage\">{{ percentage }}%</span>\n          <el-progress :show-text=\"false\" :text-inside=\"false\" :stroke-width=\"2\" :percentage=\"percentage\" />\n        </div>\n      </transition>\n    </div>\n    <!-- <span\n      v-if=\"this.file\"\n    >{{Math.floor(((this.formDataList.length-this.waitNum)/this.formDataList.length)*100)}}%</span> -->\n    <div class=\"tips\">此版本为先行体验功能测试版，样式美化和性能优化正在进行中，上传切片文件和合成的完整文件分别再QMPlusserver目录的breakpointDir文件夹和fileDir文件夹</div>\n  </div>\n</template>\n\n<script>\nimport SparkMD5 from 'spark-md5'\nimport axios from 'axios'\nimport {\n  findFile,\n  breakpointContinueFinish,\n  removeChunk\n} from '@/api/breakpoint'\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      file: null,\n      fileMd5: '',\n      formDataList: [],\n      waitUpLoad: [],\n      waitNum: 0,\n      limitFileSize: false,\n      percentage: 0,\n      percentageFlage: true,\n      customColor: '#409eff'\n    }\n  },\n  methods: {\n    // 选中文件的函数\n    async choseFile(e) {\n      const fileR = new FileReader() // 创建一个reader用来读取文件流\n      const file = e.target.files[0] // 获取当前文件\n      const maxSize = 5 * 1024 * 1024\n      this.file = file // file 丢全局方便后面用 可以改进为func传参形式\n      this.percentage = 0\n      if (file.size < maxSize) {\n        fileR.readAsArrayBuffer(file) // 把文件读成ArrayBuffer  主要为了保持跟后端的流一致\n        fileR.onload = async e => {\n          // 读成arrayBuffer的回调 e 为方法自带参数 相当于 dom的e 流存在e.target.result 中\n          const blob = e.target.result\n          const spark = new SparkMD5.ArrayBuffer() // 创建md5制造工具 （md5用于检测文件一致性 这里不懂就打电话问我）\n          spark.append(blob) // 文件流丢进工具\n          this.fileMd5 = spark.end() // 工具结束 产生一个a 总文件的md5\n          const FileSliceCap = 1 * 1024 * 1024 // 分片字节数\n          let start = 0 // 定义分片开始切的地方\n          let end = 0 // 每片结束切的地方a\n          let i = 0 // 第几片\n          this.formDataList = [] // 分片存储的一个池子 丢全局\n          while (end < file.size) {\n            // 当结尾数字大于文件总size的时候 结束切片\n            start = i * FileSliceCap // 计算每片开始位置\n            end = (i + 1) * FileSliceCap // 计算每片结束位置\n            var fileSlice = this.file.slice(start, end) // 开始切  file.slice 为 h5方法 对文件切片 参数为 起止字节数\n            const formData = new window.FormData() // 创建FormData用于存储传给后端的信息\n            formData.append('fileMd5', this.fileMd5) // 存储总文件的Md5 让后端知道自己是谁的切片\n            formData.append('file', fileSlice) // 当前的切片\n            formData.append('chunkNumber', i) // 当前是第几片\n            formData.append('fileName', this.file.name) // 当前文件的文件名 用于后端文件切片的命名  formData.appen 为 formData对象添加参数的方法\n            this.formDataList.push({ key: i, formData }) // 把当前切片信息 自己是第几片 存入我们方才准备好的池子\n            i++\n          }\n          const params = {\n            fileName: this.file.name,\n            fileMd5: this.fileMd5,\n            chunkTotal: this.formDataList.length\n          }\n          const res = await findFile(params)\n          // 全部切完以后 发一个请求给后端 拉当前文件后台存储的切片信息 用于检测有多少上传成功的切片\n          const finishList = res.data.file.ExaFileChunk // 上传成功的切片\n          const IsFinish = res.data.file.IsFinish // 是否是同文件不同命 （文件md5相同 文件名不同 则默认是同一个文件但是不同文件名 此时后台数据库只需要拷贝一下数据库文件即可 不需要上传文件 即秒传功能）\n          if (!IsFinish) {\n            // 当是断点续传时候\n            this.waitUpLoad = this.formDataList.filter(all => {\n              return !(\n                finishList &&\n              finishList.some(fi => fi.FileChunkNumber === all.key)\n              ) // 找出需要上传的切片\n            })\n          } else {\n            this.waitUpLoad = [] // 秒传则没有需要上传的切片\n          }\n          this.waitNum = this.waitUpLoad.length // 记录长度用于百分比展示\n        }\n      } else {\n        this.limitFileSize = true\n        this.$message('请上传小于5M文件')\n      }\n    },\n    getFile() {\n      // 确定按钮\n      if (this.file === null) {\n        this.$message('请先上传文件')\n        return\n      }\n      this.percentage = Math.floor(((this.formDataList.length - this.waitNum) / this.formDataList.length) * 100)\n      if (this.percentage === 100) {\n        this.percentageFlage = false\n      }\n      this.sliceFile() // 上传切片\n    },\n    sliceFile() {\n      this.waitUpLoad &&\n        this.waitUpLoad.map(item => {\n          // 需要上传的切片\n          item.formData.append('chunkTotal', this.formDataList.length) // 切片总数携带给后台 总有用的\n          const fileR = new FileReader() // 功能同上\n          const file = item.formData.get('file')\n          fileR.readAsArrayBuffer(file)\n          fileR.onload = e => {\n            const spark = new SparkMD5.ArrayBuffer()\n            spark.append(e.target.result)\n            item.formData.append('chunkMd5', spark.end()) // 获取当前切片md5 后端用于验证切片完整性\n            this.upLoadFileSlice(item)\n          }\n        })\n    },\n    async upLoadFileSlice(item) {\n      // 切片上传\n      await axios.post(process.env.VUE_APP_BASE_API + '/fileUploadAndDownload/breakpointContinue', item.formData)\n      this.waitNum-- // 百分数增加\n      if (this.waitNum === 0) {\n        // 切片传完以后 合成文件\n        const params = {\n          fileName: this.file.name,\n          fileMd5: this.fileMd5\n        }\n        const res = await breakpointContinueFinish(params)\n        if (res.success) {\n          // 合成文件过后 删除缓存切片\n          const params = {\n            fileName: this.file.name,\n            fileMd5: this.fileMd5,\n            filePath: res.data.filePath\n          }\n          await removeChunk(params)\n        }\n      }\n    },\n    inputChange() {\n      this.$refs.Input.dispatchEvent(new MouseEvent('click'))\n    }\n  }\n}\n</script>\n\n<style lang='scss' scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n#fromCont{\n  display: inline-block;\n}\n.fileUpload{\n    padding: 3px 10px;\n    font-size: 12px;\n    height: 20px;\n    line-height: 20px;\n    position: relative;\n    cursor: pointer;\n    color: #000;\n    border: 1px solid #c1c1c1;\n    border-radius: 4px;\n    overflow: hidden;\n    display: inline-block;\n    input{\n      position: absolute;\n      font-size: 100px;\n      right: 0;\n      top: 0;\n      opacity: 0;\n      cursor: pointer;\n    }\n}\n .fileName{\n    display: inline-block;\n    vertical-align: top;\n    margin: 6px 15px 0 15px;\n  }\n  .uploadBtn{\n    position: relative;\n    top: -10px;\n    margin-left: 15px;\n  }\n  .tips{\n    margin-top: 30px;\n    font-size: 14px;\n    font-weight: 400;\n    color: #606266;\n  }\n  .el-divider{\n    margin: 0 0 30px 0;\n  }\n\n .list{\n   margin-top:15px;\n }\n .list-item {\n  display: block;\n  margin-right: 10px;\n  color: #606266;\n  line-height: 25px;\n  margin-bottom: 5px;\n  width: 40%;\n   .percentage{\n          float: right;\n        }\n}\n.list-enter-active, .list-leave-active {\n  transition: all 1s;\n}\n.list-enter, .list-leave-to\n/* .list-leave-active for below version 2.1.8 */ {\n  opacity: 0;\n  transform: translateY(-30px);\n}\n</style>\n"]}]}