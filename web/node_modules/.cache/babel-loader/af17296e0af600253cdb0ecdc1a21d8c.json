{"remainingRequest":"E:\\console\\web\\node_modules\\babel-loader\\lib\\index.js!E:\\console\\web\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\console\\web\\src\\permission.js","dependencies":[{"path":"E:\\console\\web\\src\\permission.js","mtime":1625854608000},{"path":"E:\\console\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\console\\web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\console\\web\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiRTovY29uc29sZS93ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJFOi9jb25zb2xlL3dlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCByb3V0ZXIgZnJvbSAnLi9yb3V0ZXInOwppbXBvcnQgeyBzdG9yZSB9IGZyb20gJ0Avc3RvcmUnOwppbXBvcnQgZ2V0UGFnZVRpdGxlIGZyb20gJ0AvdXRpbHMvcGFnZSc7CnZhciBhc3luY1JvdXRlckZsYWcgPSAwOwp2YXIgd2hpdGVMaXN0ID0gWydMb2dpbicsICdJbml0J107CnJvdXRlci5iZWZvcmVFYWNoKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHRvLCBmcm9tLCBuZXh0KSB7CiAgICB2YXIgdG9rZW4sIGFzeW5jUm91dGVyczsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgdG9rZW4gPSBzdG9yZS5nZXR0ZXJzWyd1c2VyL3Rva2VuJ107IC8vIOWcqOeZveWQjeWNleS4reeahOWIpOaWreaDheWGtQogICAgICAgICAgICAvLyDkv67mlLnnvZHpobXmoIfnrb7lkI3np7AKCiAgICAgICAgICAgIGRvY3VtZW50LnRpdGxlID0gZ2V0UGFnZVRpdGxlKHRvLm1ldGEudGl0bGUpOwoKICAgICAgICAgICAgaWYgKCEod2hpdGVMaXN0LmluZGV4T2YodG8ubmFtZSkgPiAtMSkpIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHRva2VuKSB7CiAgICAgICAgICAgICAgbmV4dCh7CiAgICAgICAgICAgICAgICBuYW1lOiBzdG9yZS5nZXR0ZXJzWyd1c2VyL3VzZXJJbmZvJ10uYXV0aG9yaXR5LmRlZmF1bHRSb3V0ZXIKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBuZXh0KCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxODsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICBpZiAoIXRva2VuKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE3OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoISghYXN5bmNSb3V0ZXJGbGFnICYmIHN0b3JlLmdldHRlcnNbJ3JvdXRlci9hc3luY1JvdXRlcnMnXS5sZW5ndGggPT09IDApKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE2OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBhc3luY1JvdXRlckZsYWcrKzsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExOwogICAgICAgICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2goJ3JvdXRlci9TZXRBc3luY1JvdXRlcicpOwoKICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgIGFzeW5jUm91dGVycyA9IHN0b3JlLmdldHRlcnNbJ3JvdXRlci9hc3luY1JvdXRlcnMnXTsKICAgICAgICAgICAgcm91dGVyLmFkZFJvdXRlcyhhc3luY1JvdXRlcnMpOwogICAgICAgICAgICBuZXh0KF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdG8pLCB7fSwgewogICAgICAgICAgICAgIHJlcGxhY2U6IHRydWUKICAgICAgICAgICAgfSkpOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTc7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgIGlmICh0by5tYXRjaGVkLmxlbmd0aCkgewogICAgICAgICAgICAgIG5leHQoKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBuZXh0KHsKICAgICAgICAgICAgICAgIHBhdGg6ICcvbGF5b3V0LzQwNCcKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgIC8vIOS4jeWcqOeZveWQjeWNleS4reW5tuS4lOacqueZu+mZhueahOaXtuWAmQogICAgICAgICAgICBpZiAoIXRva2VuKSB7CiAgICAgICAgICAgICAgbmV4dCh7CiAgICAgICAgICAgICAgICBuYW1lOiAnTG9naW4nLAogICAgICAgICAgICAgICAgcXVlcnk6IHsKICAgICAgICAgICAgICAgICAgcmVkaXJlY3Q6IGRvY3VtZW50LmxvY2F0aW9uLmhhc2gKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gKF94LCBfeDIsIF94MykgewogICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCkpOw=="},{"version":3,"sources":["E:/console/web/src/permission.js"],"names":["router","store","getPageTitle","asyncRouterFlag","whiteList","beforeEach","to","from","next","token","getters","document","title","meta","indexOf","name","authority","defaultRouter","length","dispatch","asyncRouters","addRoutes","replace","matched","path","query","redirect","location","hash"],"mappings":";;;;;AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AAEA,IAAIC,eAAe,GAAG,CAAtB;AAEA,IAAMC,SAAS,GAAG,CAAC,OAAD,EAAU,MAAV,CAAlB;AACAJ,MAAM,CAACK,UAAP;AAAA,qEAAkB,iBAAMC,EAAN,EAAUC,IAAV,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,YAAAA,KADU,GACFR,KAAK,CAACS,OAAN,CAAc,YAAd,CADE,EAEhB;AACA;;AACAC,YAAAA,QAAQ,CAACC,KAAT,GAAiBV,YAAY,CAACI,EAAE,CAACO,IAAH,CAAQD,KAAT,CAA7B;;AAJgB,kBAKZR,SAAS,CAACU,OAAV,CAAkBR,EAAE,CAACS,IAArB,IAA6B,CAAC,CALlB;AAAA;AAAA;AAAA;;AAMd,gBAAIN,KAAJ,EAAW;AACTD,cAAAA,IAAI,CAAC;AAAEO,gBAAAA,IAAI,EAAEd,KAAK,CAACS,OAAN,CAAc,eAAd,EAA+BM,SAA/B,CAAyCC;AAAjD,eAAD,CAAJ;AACD,aAFD,MAEO;AACLT,cAAAA,IAAI;AACL;;AAVa;AAAA;;AAAA;AAAA,iBAaVC,KAbU;AAAA;AAAA;AAAA;;AAAA,kBAeR,CAACN,eAAD,IAAoBF,KAAK,CAACS,OAAN,CAAc,qBAAd,EAAqCQ,MAArC,KAAgD,CAf5D;AAAA;AAAA;AAAA;;AAgBVf,YAAAA,eAAe;AAhBL;AAAA,mBAiBJF,KAAK,CAACkB,QAAN,CAAe,uBAAf,CAjBI;;AAAA;AAkBJC,YAAAA,YAlBI,GAkBWnB,KAAK,CAACS,OAAN,CAAc,qBAAd,CAlBX;AAmBVV,YAAAA,MAAM,CAACqB,SAAP,CAAiBD,YAAjB;AACAZ,YAAAA,IAAI,iCAAMF,EAAN;AAAUgB,cAAAA,OAAO,EAAE;AAAnB,eAAJ;AApBU;AAAA;;AAAA;AAsBV,gBAAIhB,EAAE,CAACiB,OAAH,CAAWL,MAAf,EAAuB;AACrBV,cAAAA,IAAI;AACL,aAFD,MAEO;AACLA,cAAAA,IAAI,CAAC;AAAEgB,gBAAAA,IAAI,EAAE;AAAR,eAAD,CAAJ;AACD;;AA1BS;AA6Bd;AACA,gBAAI,CAACf,KAAL,EAAY;AACVD,cAAAA,IAAI,CAAC;AACHO,gBAAAA,IAAI,EAAE,OADH;AAEHU,gBAAAA,KAAK,EAAE;AACLC,kBAAAA,QAAQ,EAAEf,QAAQ,CAACgB,QAAT,CAAkBC;AADvB;AAFJ,eAAD,CAAJ;AAMD;;AArCa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import router from './router'\nimport { store } from '@/store'\nimport getPageTitle from '@/utils/page'\n\nlet asyncRouterFlag = 0\n\nconst whiteList = ['Login', 'Init']\nrouter.beforeEach(async(to, from, next) => {\n  const token = store.getters['user/token']\n  // 在白名单中的判断情况\n  // 修改网页标签名称\n  document.title = getPageTitle(to.meta.title)\n  if (whiteList.indexOf(to.name) > -1) {\n    if (token) {\n      next({ name: store.getters['user/userInfo'].authority.defaultRouter })\n    } else {\n      next()\n    }\n  } else {\n    // 不在白名单中并且已经登陆的时候\n    if (token) {\n      // 添加flag防止多次获取动态路由和栈溢出\n      if (!asyncRouterFlag && store.getters['router/asyncRouters'].length === 0) {\n        asyncRouterFlag++\n        await store.dispatch('router/SetAsyncRouter')\n        const asyncRouters = store.getters['router/asyncRouters']\n        router.addRoutes(asyncRouters)\n        next({ ...to, replace: true })\n      } else {\n        if (to.matched.length) {\n          next()\n        } else {\n          next({ path: '/layout/404' })\n        }\n      }\n    }\n    // 不在白名单中并且未登陆的时候\n    if (!token) {\n      next({\n        name: 'Login',\n        query: {\n          redirect: document.location.hash\n        }\n      })\n    }\n  }\n})\n"]}]}