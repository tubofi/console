{"remainingRequest":"E:\\console\\web\\node_modules\\babel-loader\\lib\\index.js!E:\\console\\web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\console\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\console\\web\\src\\view\\example\\simpleUploader\\simpleUploader.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\console\\web\\src\\view\\example\\simpleUploader\\simpleUploader.vue","mtime":1625854608000},{"path":"E:\\console\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\console\\web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\console\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\console\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29tZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJFOi9jb25zb2xlL3dlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIkU6L2NvbnNvbGUvd2ViL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KdmFyIG5vdFVwbG9hZGVkQ2h1bmtzID0gW107IC8vIOW3sue7j+S4iuS8oOi/h+eahOaWh+S7tmNodW5rTnVtYmVy5pWw57uECgp2YXIgaXNVcGxvYWRlZCA9IGZhbHNlOyAvLyDmlofku7blt7Lnu4/kuIrkvKDmiJDlip/kuoYKCmltcG9ydCB7IG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IHsgY2hlY2tGaWxlTWQ1LCBtZXJnZUZpbGVNZDUgfSBmcm9tICdAL2FwaS9zaW1wbGVVcGxvYWRlcic7CmltcG9ydCBTcGFya01ENSBmcm9tICdzcGFyay1tZDUnOwp2YXIgcGF0aCA9IHByb2Nlc3MuZW52LlZVRV9BUFBfQkFTRV9BUEk7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnU2ltcGxlVXBsb2FkZXInLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBtZDU6ICcnCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbWFwR2V0dGVycygndXNlcicsIFsndXNlckluZm8nLCAndG9rZW4nXSkpLCB7fSwgewogICAgc3RhdHVzVGV4dDogZnVuY3Rpb24gc3RhdHVzVGV4dCgpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBzdWNjZXNzOiAn5oiQ5Yqf5LqGJywKICAgICAgICBlcnJvcjogJ+WHuumUmeS6hicsCiAgICAgICAgdXBsb2FkaW5nOiAn5LiK5Lyg5LitJywKICAgICAgICBwYXVzZWQ6ICfmmoLlgZzkuK0nLAogICAgICAgIHdhaXRpbmc6ICfnrYnlvoXkuK0nCiAgICAgIH07CiAgICB9LAogICAgb3B0aW9uczogZnVuY3Rpb24gb3B0aW9ucygpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICB0YXJnZXQ6IHBhdGggKyAnL3NpbXBsZVVwbG9hZGVyL3VwbG9hZCcsCiAgICAgICAgdGVzdENodW5rczogZmFsc2UsCiAgICAgICAgc2ltdWx0YW5lb3VzVXBsb2FkczogNSwKICAgICAgICBjaHVua1NpemU6IDIgKiAxMDI0ICogMTAyNCwKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAneC10b2tlbic6IHRoaXMudG9rZW4sCiAgICAgICAgICAneC11c2VyLWlkJzogdGhpcy51c2VySW5mby5JRAogICAgICAgIH0sCiAgICAgICAgY2hlY2tDaHVua1VwbG9hZGVkQnlSZXNwb25zZTogZnVuY3Rpb24gY2hlY2tDaHVua1VwbG9hZGVkQnlSZXNwb25zZShjaHVuaykgewogICAgICAgICAgaWYgKGlzVXBsb2FkZWQpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIHJldHVybiB0cnVlIOS8muW/veeVpeW9k+WJjeaWh+S7tu+8jOS4jeS8muWGjeWPkemAgee7meWQjuWPsAogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8g5qC55o2u5bey57uP5LiK5Lyg6L+H55qE5YiH54mH5p2l6L+b6KGM5b+955WlCiAgICAgICAgICAgIHJldHVybiBub3RVcGxvYWRlZENodW5rcyAmJiBub3RVcGxvYWRlZENodW5rcy5zb21lKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uY2h1bmtOdW1iZXIgPT09IGNodW5rLm9mZnNldCArIDE7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKICAgIH0KICB9KSwKICBtZXRob2RzOiB7CiAgICAvLyDkuIrkvKDljZXkuKrmlofku7YKICAgIGZpbGVBZGRlZDogZnVuY3Rpb24gZmlsZUFkZGVkKGZpbGUpIHsKICAgICAgdGhpcy5jb21wdXRlTUQ1KGZpbGUpOyAvLyDnlJ/miJBNRDUKICAgIH0sCiAgICAvLyDorqHnrpdNRDXlgLwKICAgIGNvbXB1dGVNRDU6IGZ1bmN0aW9uIGNvbXB1dGVNRDUoZmlsZSkgewogICAgICB2YXIgdGhhdCA9IHRoaXM7CiAgICAgIGlzVXBsb2FkZWQgPSBmYWxzZTsgLy8g6L+Z5Liq5paH5Lu25piv5ZCm5bey57uP5LiK5Lyg5oiQ5Yqf6L+HCgogICAgICBub3RVcGxvYWRlZENodW5rcyA9IFtdOyAvLyDmnKrmiJDlip/nmoRjaHVua051bWJlcgoKICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwogICAgICB2YXIgbWQ1ID0gJyc7CiAgICAgIGZpbGUucGF1c2UoKTsKICAgICAgZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihmaWxlLmZpbGUpOwoKICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGUpIHsKICAgICAgICAgIHZhciByZXM7CiAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgIGlmICghKGZpbGUuc2l6ZSAhPT0gZS50YXJnZXQucmVzdWx0LmJ5dGVMZW5ndGgpKSB7CiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IoJ0Jyb3dzZXIgcmVwb3J0ZWQgc3VjY2VzcyBidXQgY291bGQgbm90IHJlYWQgdGhlIGZpbGUgdW50aWwgdGhlIGVuZC4nKTsKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgZmFsc2UpOwoKICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgbWQ1ID0gU3BhcmtNRDUuQXJyYXlCdWZmZXIuaGFzaChlLnRhcmdldC5yZXN1bHQsIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgZmlsZS51bmlxdWVJZGVudGlmaWVyID0gbWQ1OwoKICAgICAgICAgICAgICAgICAgaWYgKCEobWQ1ICE9PSAnJykpIHsKICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgICByZXR1cm4gY2hlY2tGaWxlTWQ1KHsKICAgICAgICAgICAgICAgICAgICBtZDU6IG1kNQogICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgICAgICBpZiAocmVzLmNvZGUgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBpZiAocmVzLmRhdGEuaXNEb25lKSB7CiAgICAgICAgICAgICAgICAgICAgICAvLyDkuIrkvKDmiJDlip/ov4cKICAgICAgICAgICAgICAgICAgICAgIGlzVXBsb2FkZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgdGhhdC4kbWVzc2FnZSh7CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICfor6Xmlofku7blt7Lnu4/kuIrkvKDmiJDlip/ov4fkuobvvIznp5LkvKDmiJDlip/jgIInLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3VjY2VzcycKICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgZmlsZS5jYW5jZWwoKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgaXNVcGxvYWRlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgbm90VXBsb2FkZWRDaHVua3MgPSByZXMuZGF0YS5jaHVua3M7CgogICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdFVwbG9hZGVkQ2h1bmtzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICBmaWxlLnJlc3VtZSgpOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgICAgICAgfSkpOwoKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7CiAgICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH07CiAgICAgIH0oKTsKCiAgICAgIGZpbGVSZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB0aGlzLmVycm9yKCdnZW5lcmF0ZXIgbWQ1IOaXtkZpbGVSZWFkZXLlvILmraXor7vlj5bmlofku7blh7rplJnkuobvvIxGaWxlUmVhZGVyIG9uZXJyb3Igd2FzIHRyaWdnZXJlZCwgbWF5YmUgdGhlIGJyb3dzZXIgYWJvcnRlZCBkdWUgdG8gaGlnaCBtZW1vcnkgdXNhZ2UuJyk7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9OwogICAgfSwKICAgIC8vIOS4iuS8oOi/m+W6pgogICAgb25GaWxlUHJvZ3Jlc3M6IGZ1bmN0aW9uIG9uRmlsZVByb2dyZXNzKCkge30sCiAgICAvLyDkuIrkvKDmiJDlip8KICAgIG9uRmlsZVN1Y2Nlc3M6IGZ1bmN0aW9uIG9uRmlsZVN1Y2Nlc3Mocm9vdEZpbGUsIGZpbGUpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBtZXJnZUZpbGVNZDUoewogICAgICAgICAgICAgICAgICBtZDU6IGZpbGUudW5pcXVlSWRlbnRpZmllciwKICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IGZpbGUubmFtZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIG9uRmlsZUVycm9yOiBmdW5jdGlvbiBvbkZpbGVFcnJvcihyb290RmlsZSwgZmlsZSwgcmVzcG9uc2UpIHsKICAgICAgdGhpcy4kbWVzc2FnZSh7CiAgICAgICAgbWVzc2FnZTogcmVzcG9uc2UsCiAgICAgICAgdHlwZTogJ2Vycm9yJwogICAgICB9KTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["simpleUploader.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <uploader\n    :options=\"options\"\n    :file-status-text=\"statusText\"\n    :auto-start=\"false\"\n    class=\"uploader-example\"\n    @file-added=\"fileAdded\"\n    @file-progress=\"onFileProgress\"\n    @file-success=\"onFileSuccess\"\n    @file-error=\"onFileError\"\n  >\n    <uploader-unsupport />\n    <uploader-drop>\n      <p>拖拽文件至此或点击</p>\n      <uploader-btn>选择文件</uploader-btn>\n    </uploader-drop>\n    <uploader-list />\n  </uploader>\n</template>\n\n<script>\nvar notUploadedChunks = [] // 已经上传过的文件chunkNumber数组\nvar isUploaded = false // 文件已经上传成功了\nimport { mapGetters } from 'vuex'\nimport { checkFileMd5, mergeFileMd5 } from '@/api/simpleUploader'\nimport SparkMD5 from 'spark-md5'\nconst path = process.env.VUE_APP_BASE_API\nexport default {\n  name: 'SimpleUploader',\n  data() {\n    return {\n      md5: ''\n    }\n  },\n  computed: {\n    ...mapGetters('user', ['userInfo', 'token']),\n    statusText() {\n      return {\n        success: '成功了',\n        error: '出错了',\n        uploading: '上传中',\n        paused: '暂停中',\n        waiting: '等待中'\n      }\n    },\n    options() {\n      return {\n        target: path + '/simpleUploader/upload',\n        testChunks: false,\n        simultaneousUploads: 5,\n        chunkSize: 2 * 1024 * 1024,\n        headers: {\n          'x-token': this.token,\n          'x-user-id': this.userInfo.ID\n        },\n        checkChunkUploadedByResponse(chunk) {\n          if (isUploaded) {\n            return true // return true 会忽略当前文件，不会再发送给后台\n          } else {\n            // 根据已经上传过的切片来进行忽略\n            return (\n              notUploadedChunks &&\n                notUploadedChunks.some(\n                  item => item.chunkNumber === chunk.offset + 1\n                )\n            )\n          }\n        }\n      }\n    }\n  },\n  methods: {\n\n    // 上传单个文件\n    fileAdded(file) {\n      this.computeMD5(file) // 生成MD5\n    },\n    // 计算MD5值\n    computeMD5(file) {\n      var that = this\n      isUploaded = false // 这个文件是否已经上传成功过\n      notUploadedChunks = [] // 未成功的chunkNumber\n      var fileReader = new FileReader()\n      var md5 = ''\n\n      file.pause()\n\n      fileReader.readAsArrayBuffer(file.file)\n      fileReader.onload = async function(e) {\n        if (file.size !== e.target.result.byteLength) {\n          this.error(\n            'Browser reported success but could not read the file until the end.'\n          )\n          return false\n        }\n        md5 = SparkMD5.ArrayBuffer.hash(e.target.result, false)\n\n        file.uniqueIdentifier = md5\n        if (md5 !== '') {\n          const res = await checkFileMd5({ md5: md5 })\n          if (res.code === 0) {\n            if (res.data.isDone) {\n              // 上传成功过\n              isUploaded = true\n              that.$message({\n                message: '该文件已经上传成功过了，秒传成功。',\n                type: 'success'\n              })\n\n              file.cancel()\n            } else {\n              isUploaded = false\n              notUploadedChunks = res.data.chunks\n              if (notUploadedChunks.length) {\n                file.resume()\n              }\n            }\n          }\n        }\n      }\n      fileReader.onerror = function() {\n        this.error(\n          'generater md5 时FileReader异步读取文件出错了，FileReader onerror was triggered, maybe the browser aborted due to high memory usage.'\n        )\n        return false\n      }\n    },\n    // 上传进度\n    onFileProgress() {},\n    // 上传成功\n    async onFileSuccess(rootFile, file) {\n      await mergeFileMd5({ md5: file.uniqueIdentifier, fileName: file.name })\n    },\n    onFileError(rootFile, file, response) {\n      this.$message({\n        message: response,\n        type: 'error'\n      })\n    }\n  }\n}\n</script>\n\n<style>\n.uploader-example {\n  width: 880px;\n  padding: 15px;\n  margin: 15px 15px 20px;\n  font-size: 12px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);\n}\n.uploader-example .uploader-btn {\n  margin-right: 4px;\n}\n.uploader-example .uploader-list {\n  max-height: 440px;\n  overflow: auto;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n</style>\n"],"sourceRoot":"src/view/example/simpleUploader"}]}