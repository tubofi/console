{"remainingRequest":"E:\\临时\\console\\web\\node_modules\\babel-loader\\lib\\index.js!E:\\临时\\console\\web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\临时\\console\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\临时\\console\\web\\src\\view\\example\\simpleUploader\\simpleUploader.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\临时\\console\\web\\src\\view\\example\\simpleUploader\\simpleUploader.vue","mtime":1625854608000},{"path":"E:\\临时\\console\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\临时\\console\\web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\临时\\console\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\临时\\console\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29tZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJFOi9cdTRFMzRcdTY1RjYvY29uc29sZS93ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICJFOi9cdTRFMzRcdTY1RjYvY29uc29sZS93ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwp2YXIgbm90VXBsb2FkZWRDaHVua3MgPSBbXTsgLy8g5bey57uP5LiK5Lyg6L+H55qE5paH5Lu2Y2h1bmtOdW1iZXLmlbDnu4QKCnZhciBpc1VwbG9hZGVkID0gZmFsc2U7IC8vIOaWh+S7tuW3sue7j+S4iuS8oOaIkOWKn+S6hgoKaW1wb3J0IHsgbWFwR2V0dGVycyB9IGZyb20gJ3Z1ZXgnOwppbXBvcnQgeyBjaGVja0ZpbGVNZDUsIG1lcmdlRmlsZU1kNSB9IGZyb20gJ0AvYXBpL3NpbXBsZVVwbG9hZGVyJzsKaW1wb3J0IFNwYXJrTUQ1IGZyb20gJ3NwYXJrLW1kNSc7CnZhciBwYXRoID0gcHJvY2Vzcy5lbnYuVlVFX0FQUF9CQVNFX0FQSTsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdTaW1wbGVVcGxvYWRlcicsCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIG1kNTogJycKICAgIH07CiAgfSwKICBjb21wdXRlZDogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBtYXBHZXR0ZXJzKCd1c2VyJywgWyd1c2VySW5mbycsICd0b2tlbiddKSksIHt9LCB7CiAgICBzdGF0dXNUZXh0OiBmdW5jdGlvbiBzdGF0dXNUZXh0KCkgewogICAgICByZXR1cm4gewogICAgICAgIHN1Y2Nlc3M6ICfmiJDlip/kuoYnLAogICAgICAgIGVycm9yOiAn5Ye66ZSZ5LqGJywKICAgICAgICB1cGxvYWRpbmc6ICfkuIrkvKDkuK0nLAogICAgICAgIHBhdXNlZDogJ+aaguWBnOS4rScsCiAgICAgICAgd2FpdGluZzogJ+etieW+heS4rScKICAgICAgfTsKICAgIH0sCiAgICBvcHRpb25zOiBmdW5jdGlvbiBvcHRpb25zKCkgewogICAgICByZXR1cm4gewogICAgICAgIHRhcmdldDogcGF0aCArICcvc2ltcGxlVXBsb2FkZXIvdXBsb2FkJywKICAgICAgICB0ZXN0Q2h1bmtzOiBmYWxzZSwKICAgICAgICBzaW11bHRhbmVvdXNVcGxvYWRzOiA1LAogICAgICAgIGNodW5rU2l6ZTogMiAqIDEwMjQgKiAxMDI0LAogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICd4LXRva2VuJzogdGhpcy50b2tlbiwKICAgICAgICAgICd4LXVzZXItaWQnOiB0aGlzLnVzZXJJbmZvLklECiAgICAgICAgfSwKICAgICAgICBjaGVja0NodW5rVXBsb2FkZWRCeVJlc3BvbnNlOiBmdW5jdGlvbiBjaGVja0NodW5rVXBsb2FkZWRCeVJlc3BvbnNlKGNodW5rKSB7CiAgICAgICAgICBpZiAoaXNVcGxvYWRlZCkgewogICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gcmV0dXJuIHRydWUg5Lya5b+955Wl5b2T5YmN5paH5Lu277yM5LiN5Lya5YaN5Y+R6YCB57uZ5ZCO5Y+wCiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyDmoLnmja7lt7Lnu4/kuIrkvKDov4fnmoTliIfniYfmnaXov5vooYzlv73nlaUKICAgICAgICAgICAgcmV0dXJuIG5vdFVwbG9hZGVkQ2h1bmtzICYmIG5vdFVwbG9hZGVkQ2h1bmtzLnNvbWUoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICByZXR1cm4gaXRlbS5jaHVua051bWJlciA9PT0gY2h1bmsub2Zmc2V0ICsgMTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwogICAgfQogIH0pLAogIG1ldGhvZHM6IHsKICAgIC8vIOS4iuS8oOWNleS4quaWh+S7tgogICAgZmlsZUFkZGVkOiBmdW5jdGlvbiBmaWxlQWRkZWQoZmlsZSkgewogICAgICB0aGlzLmNvbXB1dGVNRDUoZmlsZSk7IC8vIOeUn+aIkE1ENQogICAgfSwKICAgIC8vIOiuoeeul01ENeWAvAogICAgY29tcHV0ZU1ENTogZnVuY3Rpb24gY29tcHV0ZU1ENShmaWxlKSB7CiAgICAgIHZhciB0aGF0ID0gdGhpczsKICAgICAgaXNVcGxvYWRlZCA9IGZhbHNlOyAvLyDov5nkuKrmlofku7bmmK/lkKblt7Lnu4/kuIrkvKDmiJDlip/ov4cKCiAgICAgIG5vdFVwbG9hZGVkQ2h1bmtzID0gW107IC8vIOacquaIkOWKn+eahGNodW5rTnVtYmVyCgogICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHZhciBtZDUgPSAnJzsKICAgICAgZmlsZS5wYXVzZSgpOwogICAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUuZmlsZSk7CgogICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoZSkgewogICAgICAgICAgdmFyIHJlczsKICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgaWYgKCEoZmlsZS5zaXplICE9PSBlLnRhcmdldC5yZXN1bHQuYnl0ZUxlbmd0aCkpIHsKICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcignQnJvd3NlciByZXBvcnRlZCBzdWNjZXNzIGJ1dCBjb3VsZCBub3QgcmVhZCB0aGUgZmlsZSB1bnRpbCB0aGUgZW5kLicpOwogICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBmYWxzZSk7CgogICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICBtZDUgPSBTcGFya01ENS5BcnJheUJ1ZmZlci5oYXNoKGUudGFyZ2V0LnJlc3VsdCwgZmFsc2UpOwogICAgICAgICAgICAgICAgICBmaWxlLnVuaXF1ZUlkZW50aWZpZXIgPSBtZDU7CgogICAgICAgICAgICAgICAgICBpZiAoIShtZDUgIT09ICcnKSkgewogICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7CiAgICAgICAgICAgICAgICAgIHJldHVybiBjaGVja0ZpbGVNZDUoewogICAgICAgICAgICAgICAgICAgIG1kNTogbWQ1CiAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgICAgIGlmIChyZXMuY29kZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGlmIChyZXMuZGF0YS5pc0RvbmUpIHsKICAgICAgICAgICAgICAgICAgICAgIC8vIOS4iuS8oOaIkOWKn+i/hwogICAgICAgICAgICAgICAgICAgICAgaXNVcGxvYWRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICB0aGF0LiRtZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ+ivpeaWh+S7tuW3sue7j+S4iuS8oOaIkOWKn+i/h+S6hu+8jOenkuS8oOaIkOWKn+OAgicsCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJwogICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICBmaWxlLmNhbmNlbCgpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICBpc1VwbG9hZGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICBub3RVcGxvYWRlZENodW5rcyA9IHJlcy5kYXRhLmNodW5rczsKCiAgICAgICAgICAgICAgICAgICAgICBpZiAobm90VXBsb2FkZWRDaHVua3MubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUucmVzdW1lKCk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTsKICAgICAgICB9KSk7CgogICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gpIHsKICAgICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfTsKICAgICAgfSgpOwoKICAgICAgZmlsZVJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24gKCkgewogICAgICAgIHRoaXMuZXJyb3IoJ2dlbmVyYXRlciBtZDUg5pe2RmlsZVJlYWRlcuW8guatpeivu+WPluaWh+S7tuWHuumUmeS6hu+8jEZpbGVSZWFkZXIgb25lcnJvciB3YXMgdHJpZ2dlcmVkLCBtYXliZSB0aGUgYnJvd3NlciBhYm9ydGVkIGR1ZSB0byBoaWdoIG1lbW9yeSB1c2FnZS4nKTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH07CiAgICB9LAogICAgLy8g5LiK5Lyg6L+b5bqmCiAgICBvbkZpbGVQcm9ncmVzczogZnVuY3Rpb24gb25GaWxlUHJvZ3Jlc3MoKSB7fSwKICAgIC8vIOS4iuS8oOaIkOWKnwogICAgb25GaWxlU3VjY2VzczogZnVuY3Rpb24gb25GaWxlU3VjY2Vzcyhyb290RmlsZSwgZmlsZSkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIG1lcmdlRmlsZU1kNSh7CiAgICAgICAgICAgICAgICAgIG1kNTogZmlsZS51bmlxdWVJZGVudGlmaWVyLAogICAgICAgICAgICAgICAgICBmaWxlTmFtZTogZmlsZS5uYW1lCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgb25GaWxlRXJyb3I6IGZ1bmN0aW9uIG9uRmlsZUVycm9yKHJvb3RGaWxlLCBmaWxlLCByZXNwb25zZSkgewogICAgICB0aGlzLiRtZXNzYWdlKHsKICAgICAgICBtZXNzYWdlOiByZXNwb25zZSwKICAgICAgICB0eXBlOiAnZXJyb3InCiAgICAgIH0pOwogICAgfQogIH0KfTs="},{"version":3,"sources":["simpleUploader.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <uploader\n    :options=\"options\"\n    :file-status-text=\"statusText\"\n    :auto-start=\"false\"\n    class=\"uploader-example\"\n    @file-added=\"fileAdded\"\n    @file-progress=\"onFileProgress\"\n    @file-success=\"onFileSuccess\"\n    @file-error=\"onFileError\"\n  >\n    <uploader-unsupport />\n    <uploader-drop>\n      <p>拖拽文件至此或点击</p>\n      <uploader-btn>选择文件</uploader-btn>\n    </uploader-drop>\n    <uploader-list />\n  </uploader>\n</template>\n\n<script>\nvar notUploadedChunks = [] // 已经上传过的文件chunkNumber数组\nvar isUploaded = false // 文件已经上传成功了\nimport { mapGetters } from 'vuex'\nimport { checkFileMd5, mergeFileMd5 } from '@/api/simpleUploader'\nimport SparkMD5 from 'spark-md5'\nconst path = process.env.VUE_APP_BASE_API\nexport default {\n  name: 'SimpleUploader',\n  data() {\n    return {\n      md5: ''\n    }\n  },\n  computed: {\n    ...mapGetters('user', ['userInfo', 'token']),\n    statusText() {\n      return {\n        success: '成功了',\n        error: '出错了',\n        uploading: '上传中',\n        paused: '暂停中',\n        waiting: '等待中'\n      }\n    },\n    options() {\n      return {\n        target: path + '/simpleUploader/upload',\n        testChunks: false,\n        simultaneousUploads: 5,\n        chunkSize: 2 * 1024 * 1024,\n        headers: {\n          'x-token': this.token,\n          'x-user-id': this.userInfo.ID\n        },\n        checkChunkUploadedByResponse(chunk) {\n          if (isUploaded) {\n            return true // return true 会忽略当前文件，不会再发送给后台\n          } else {\n            // 根据已经上传过的切片来进行忽略\n            return (\n              notUploadedChunks &&\n                notUploadedChunks.some(\n                  item => item.chunkNumber === chunk.offset + 1\n                )\n            )\n          }\n        }\n      }\n    }\n  },\n  methods: {\n\n    // 上传单个文件\n    fileAdded(file) {\n      this.computeMD5(file) // 生成MD5\n    },\n    // 计算MD5值\n    computeMD5(file) {\n      var that = this\n      isUploaded = false // 这个文件是否已经上传成功过\n      notUploadedChunks = [] // 未成功的chunkNumber\n      var fileReader = new FileReader()\n      var md5 = ''\n\n      file.pause()\n\n      fileReader.readAsArrayBuffer(file.file)\n      fileReader.onload = async function(e) {\n        if (file.size !== e.target.result.byteLength) {\n          this.error(\n            'Browser reported success but could not read the file until the end.'\n          )\n          return false\n        }\n        md5 = SparkMD5.ArrayBuffer.hash(e.target.result, false)\n\n        file.uniqueIdentifier = md5\n        if (md5 !== '') {\n          const res = await checkFileMd5({ md5: md5 })\n          if (res.code === 0) {\n            if (res.data.isDone) {\n              // 上传成功过\n              isUploaded = true\n              that.$message({\n                message: '该文件已经上传成功过了，秒传成功。',\n                type: 'success'\n              })\n\n              file.cancel()\n            } else {\n              isUploaded = false\n              notUploadedChunks = res.data.chunks\n              if (notUploadedChunks.length) {\n                file.resume()\n              }\n            }\n          }\n        }\n      }\n      fileReader.onerror = function() {\n        this.error(\n          'generater md5 时FileReader异步读取文件出错了，FileReader onerror was triggered, maybe the browser aborted due to high memory usage.'\n        )\n        return false\n      }\n    },\n    // 上传进度\n    onFileProgress() {},\n    // 上传成功\n    async onFileSuccess(rootFile, file) {\n      await mergeFileMd5({ md5: file.uniqueIdentifier, fileName: file.name })\n    },\n    onFileError(rootFile, file, response) {\n      this.$message({\n        message: response,\n        type: 'error'\n      })\n    }\n  }\n}\n</script>\n\n<style>\n.uploader-example {\n  width: 880px;\n  padding: 15px;\n  margin: 15px 15px 20px;\n  font-size: 12px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);\n}\n.uploader-example .uploader-btn {\n  margin-right: 4px;\n}\n.uploader-example .uploader-list {\n  max-height: 440px;\n  overflow: auto;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n</style>\n"],"sourceRoot":"src/view/example/simpleUploader"}]}