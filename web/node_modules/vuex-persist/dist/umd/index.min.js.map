{"version":3,"file":"index.min.js","sources":["../../src/SimplePromiseQueue.ts","../../src/utils.ts","../../src/index.ts"],"sourcesContent":["// tslint:disable: variable-name\nexport default class SimplePromiseQueue {\n  private readonly _queue: Array<Promise<void>> = []\n  private _flushing = false\n\n  public enqueue(promise: Promise<void>) {\n    this._queue.push(promise)\n    if (!this._flushing) { return this.flushQueue() }\n    return Promise.resolve()\n  }\n\n  private flushQueue() {\n    this._flushing = true\n\n    const chain = (): Promise<void> | void => {\n      const nextTask = this._queue.shift()\n      if (nextTask) {\n        return nextTask.then(chain)\n      } else {\n        this._flushing = false\n      }\n    }\n    return Promise.resolve(chain())\n  }\n}\n","import lodashMerge from 'lodash.merge'\n\nexport function merge(into: any, from: any) {\n  return lodashMerge({}, into, from)\n}\n","/**\n * Created by championswimmer on 18/07/17.\n */\nimport {Mutation, MutationPayload, Payload, Plugin, Store} from 'vuex'\nimport {AsyncStorage} from './AsyncStorage'\nimport { MockStorage } from './MockStorage'\nimport {PersistOptions} from './PersistOptions'\nimport SimplePromiseQueue from './SimplePromiseQueue'\nimport {merge} from './utils'\n\nlet FlattedJSON = JSON\n\n/**\n * A class that implements the vuex persistence.\n * @type S type of the 'state' inside the store (default: any)\n */\nexport class VuexPersistence<S> implements PersistOptions<S> {\n  public asyncStorage: boolean\n  public storage: Storage | AsyncStorage\n  public restoreState: (key: string, storage?: AsyncStorage | Storage) => Promise<S> | S\n  public saveState: (key: string, state: {}, storage?: AsyncStorage | Storage) => Promise<void> | void\n  public reducer: (state: S) => Partial<S>\n  public key: string\n  public filter: (mutation: Payload) => boolean\n  public modules: string[]\n  public strictMode: boolean\n  public supportCircular: boolean\n\n  /**\n   * The plugin function that can be used inside a vuex store.\n   */\n  public plugin: Plugin<S>\n  /**\n   * A mutation that can be used to restore state\n   * Helpful if we are running in strict mode\n   */\n  public RESTORE_MUTATION: Mutation<S>\n  public subscribed: boolean\n\n  // tslint:disable-next-line:variable-name\n  private _mutex = new SimplePromiseQueue()\n\n  /**\n   * Create a {@link VuexPersistence} object.\n   * Use the <code>plugin</code> function of this class as a\n   * Vuex plugin.\n   * @param {PersistOptions} options\n   */\n  public constructor(options?: PersistOptions<S>) {\n    if (typeof options === 'undefined') options = {} as PersistOptions<S>\n    this.key = ((options.key != null) ? options.key : 'vuex')\n\n    this.subscribed = false\n    this.supportCircular = options.supportCircular || false\n    if (this.supportCircular) {\n      FlattedJSON = require('flatted')\n    }\n\n    // @ts-ignore\n    if (process.env.NODE_ENV === 'production') {\n      this.storage = options.storage ||  window.localStorage\n    } else {\n      // @ts-ignore\n      if (process.env.MODULE_FORMAT !== 'umd') {\n        this.storage = options.storage || (typeof window !== 'undefined' ? window.localStorage : new MockStorage!())\n      } else {\n        // If UMD module, then we will only be having localStorage\n        this.storage = options.storage || window.localStorage\n      }\n    }\n\n    /**\n     * How this works is -\n     *  1. If there is options.reducer function, we use that, if not;\n     *  2. We check options.modules;\n     *    1. If there is no options.modules array, we use entire state in reducer\n     *    2. Otherwise, we create a reducer that merges all those state modules that are\n     *        defined in the options.modules[] array\n     * @type {((state: S) => {}) | ((state: S) => S) | ((state: any) => {})}\n     */\n    this.reducer = (\n      (options.reducer != null)\n        ? options.reducer\n        : (\n          (options.modules == null)\n            ? ((state: S) => state)\n            : (\n              (state: any) =>\n                (options!.modules as string[]).reduce((a, i) =>\n                  merge(a, {[i]: state[i]}), {/* start empty accumulator*/})\n            )\n        )\n    )\n\n    this.filter = options.filter || ((mutation) => true)\n\n    this.strictMode = options.strictMode || false\n\n    this.RESTORE_MUTATION = function RESTORE_MUTATION(state: S, savedState: any) {\n      const mergedState = merge(state, savedState || {})\n      for (const propertyName of Object.keys(mergedState)) {\n        (this as any)._vm.$set(state, propertyName, mergedState[propertyName])\n      }\n    }\n\n    this.asyncStorage = options.asyncStorage || false\n    const storageConstructor = this.storage && this.storage.constructor && this.storage.constructor.name.toLowerCase()\n    this.asyncStorage = this.asyncStorage || storageConstructor === 'localforage'\n\n    if (this.asyncStorage) {\n\n      /**\n       * Async {@link #VuexPersistence.restoreState} implementation\n       * @type {((key: string, storage?: Storage) =>\n       *      (Promise<S> | S)) | ((key: string, storage: AsyncStorage) => Promise<any>)}\n       */\n      this.restoreState = (\n        (options.restoreState != null)\n          ? options.restoreState\n          : ((key: string, storage: AsyncStorage) =>\n              (storage).getItem(key)\n                .then((value) =>\n                  typeof value === 'string' // If string, parse, or else, just return\n                    ? (\n                      this.supportCircular\n                        ? FlattedJSON.parse(value || '{}')\n                        : JSON.parse(value || '{}')\n                    )\n                    : (value || {})\n                )\n          )\n      )\n\n      /**\n       * Async {@link #VuexPersistence.saveState} implementation\n       * @type {((key: string, state: {}, storage?: Storage) =>\n       *    (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\n       */\n      this.saveState = (\n        (options.saveState != null)\n          ? options.saveState\n          : ((key: string, state: {}, storage: AsyncStorage) =>\n              (storage).setItem(\n                key, // Second argument is state _object_ if localforage, stringified otherwise\n                (((storage && storage.constructor && storage.constructor.name.toLowerCase()) === 'localforage')\n                    ? merge({}, state || {})\n                    : (\n                      this.supportCircular\n                        ? FlattedJSON.stringify(state) as any\n                        : JSON.stringify(state) as any\n                    )\n                )\n              )\n          )\n      )\n\n      /**\n       * Async version of plugin\n       * @param {Store<S>} store\n       */\n      this.plugin = (store: Store<S>) => {\n        /**\n         * For async stores, we're capturing the Promise returned\n         * by the `restoreState()` function in a `restored` property\n         * on the store itself. This would allow app developers to\n         * determine when and if the store's state has indeed been\n         * refreshed. This approach was suggested by GitHub user @hotdogee.\n         * See https://github.com/championswimmer/vuex-persist/pull/118#issuecomment-500914963\n         * @since 2.1.0\n         */\n        (store as any).restored = ((this.restoreState(this.key, this.storage)) as Promise<S>).then((savedState) => {\n          /**\n           * If in strict mode, do only via mutation\n           */\n          if (this.strictMode) {\n            store.commit('RESTORE_MUTATION', savedState)\n          } else {\n            store.replaceState(merge(store.state, savedState || {}))\n          }\n          this.subscriber(store)((mutation: MutationPayload, state: S) => {\n            if (this.filter(mutation)) {\n              this._mutex.enqueue(\n                this.saveState(this.key, this.reducer(state), this.storage) as Promise<void>\n              )\n            }\n          })\n          this.subscribed = true\n        })\n      }\n    } else {\n\n      /**\n       * Sync {@link #VuexPersistence.restoreState} implementation\n       * @type {((key: string, storage?: Storage) =>\n       *    (Promise<S> | S)) | ((key: string, storage: Storage) => (any | string | {}))}\n       */\n      this.restoreState = (\n        (options.restoreState != null)\n          ? options.restoreState\n          : ((key: string, storage: Storage) => {\n            const value = (storage).getItem(key)\n            if (typeof value === 'string') {// If string, parse, or else, just return\n              return (\n                this.supportCircular\n                  ? FlattedJSON.parse(value || '{}')\n                  : JSON.parse(value || '{}')\n              )\n            } else {\n              return (value || {})\n            }\n          })\n      )\n\n      /**\n       * Sync {@link #VuexPersistence.saveState} implementation\n       * @type {((key: string, state: {}, storage?: Storage) =>\n       *     (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}\n       */\n      this.saveState = (\n        (options.saveState != null)\n          ? options.saveState\n          : ((key: string, state: {}, storage: Storage) =>\n              (storage).setItem(\n                key, // Second argument is state _object_ if localforage, stringified otherwise\n                (\n                  this.supportCircular\n                    ? FlattedJSON.stringify(state) as any\n                    : JSON.stringify(state) as any\n                )\n              )\n          )\n      )\n\n      /**\n       * Sync version of plugin\n       * @param {Store<S>} store\n       */\n      this.plugin = (store: Store<S>) => {\n        const savedState = this.restoreState(this.key, this.storage) as S\n\n        if (this.strictMode) {\n          store.commit('RESTORE_MUTATION', savedState)\n        } else {\n          store.replaceState(merge(store.state, savedState || {}))\n        }\n\n        this.subscriber(store)((mutation: MutationPayload, state: S) => {\n          if (this.filter(mutation)) {\n            this.saveState(this.key, this.reducer(state), this.storage)\n          }\n        })\n\n        this.subscribed = true\n      }\n    }\n  }\n\n  /**\n   * Creates a subscriber on the store. automatically is used\n   * when this is used a vuex plugin. Not for manual usage.\n   * @param store\n   */\n  private subscriber = (store: Store<S>) =>\n    (handler: (mutation: MutationPayload, state: S) => any) => store.subscribe(handler)\n}\n\nexport {\n  MockStorage, AsyncStorage, PersistOptions\n}\n\nexport default VuexPersistence\n"],"names":["this","SimplePromiseQueue","promise","_queue","push","_flushing","Promise","resolve","flushQueue","chain","nextTask","_this","shift","then","merge","into","from","lodashMerge","FlattedJSON","JSON","options","store","handler","subscribe","key","subscribed","supportCircular","require","storage","window","localStorage","reducer","modules","state","reduce","a","i","filter","mutation","strictMode","RESTORE_MUTATION","savedState","mergedState","_a","Object","keys","_i","propertyName","_vm","$set","asyncStorage","storageConstructor","constructor","name","toLowerCase","restoreState","getItem","value","parse","saveState","setItem","stringify","plugin","restored","commit","replaceState","subscriber","_mutex","enqueue"],"mappings":"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"}